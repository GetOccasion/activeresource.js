{"version":3,"sources":["active-resource.js"],"names":["ActiveResource","window","Promise","es6Promise","extend","klass","mixin","method","name","results","__excludeFromExtend","push","include","prototype","Typing","constructor","match","object","__super__","call","createResourceLibrary","baseUrl","options","ResourceLibrary","Base","base","resourceLibrary","className","i","len","scope","v","_","isUndefined","isNull","constantizeScope","values","flatten","length","isObject","child","parent","key","hasOwnProperty","Object","create","console","log","queryName","pluralize","s","underscored","define","charAt","headers","interface","Interfaces","JsonApi","immutable","includePolymorphicRepeats","strictAttributes","Immutable","axios","contentType","interceptors","response","use","config","error","status","code","reject","data","errors","detail","url","responseType","params","paramsSerializer","Qs","stringify","arrayFormat","request","queryParams","resourceData","ref","k","isArray","map","toUnderscored","isA","Collection","isDate","camelized","camelize","toCamelCase","filters","mapObject","value","primaryKey","fields","fieldArray","f","join","includes","buildNestedIncludes","includeCollection","modelName","keys","build","item","isString","split","toArray","inject","includeStrArray","sortObject","column","dir","output","resource","identifier","primaryKeyValue","type","toString","relationships","onlyChanged","each","relationship","reflection","target","reflectOnAssociation","association","collection","empty","buildResourceDocument","onlyResourceIdentifiers","autosave","parentReflection","polymorphic","polymorphicInverseOf","inverseOf","compact","attributes","changedFields","documentResource","buildResourceIdentifier","omit","readWrite","reflections","without","pick","intersection","buildResourceRelationships","first","existingResource","parentRelationship","constantize","singularize","classify","addRelationshipsToFields","__assignFields","__links","links","reflectOnAllAssociations","ref1","ref2","ref3","relationshipEmpty","relationshipLinks","selfLink","url_safe_reflection_name","l","Links","__constructLink","self","related","has","loaded","__executeCallbacks","relationshipName","relationshipItems","relationshipMember","index","findResourceForRelationship","relationshipData","buildResourceOptions","findConditions","potentialTarget","findWhere","detect","t","get","buildResource","errorCollection","field","m","__buildError","propagate","out","message","_this","buildFilters","buildSparseFieldset","buildIncludeTree","buildSortList","then","built","CollectionResponse","included","assignResourceRelatedQueryParams","parameterErrors","mergePersistedChanges","resourceErrors","Associations","__associations","associationClass","Builder","HasMany","Reflection","addReflection","HasOne","BelongsTo","Attributes","last","pop","__attributes","all","read","readOnly","attribute","__readAttribute","__assignAttributes","__validAttribute","persisted","id","reloaded","reader","writer","e","reserved","isFunction","contains","Callbacks","__callbacks","afterBuild","afterRequest","func","callbacks","callback","bind","Cloning","__createClone","cloner","newCloner","clone","__queryParams","newAssociation","oldAssociation","__fields","__createCollectionAutosaveAssociationClone","parentClone","__createCollectionInverseAutosaveAssociationClone","__createSingularAutosaveAssociationClone","__createSingularInverseAutosaveAssociationClone","__replaceSingularInverseCollectionAssociationClone","inverse","replace","array","__collection","size","indexOf","original","next","set","n","iteratee","memo","reduce","separator","unshift","shift","deleted","items","predicate","filter","isEmpty","hasPrevPage","hasNextPage","Errors","__errors","reset","__add","nestedError","nestedErrors","nestedField","error1","iterator","select","startsWith","forField","Fields","newField","newTargets","oldField","changed","args","str","endsWith","Persistence","__createOrUpdate","attributesKeys","oldAttributes","defaults","obj","delete","patch","post","QueryParams","COLLECTION_RELATED","RESOURCE_RELATED","i2","assignQueryParams","param","slice","__reflections","macro","r","activeResource","HasManyReflection","HasOneReflection","BelongsToReflection","ar","AbstractReflection","INVALID_AUTOMATIC_INVERSE_OPTIONS","VALID_AUTOMATIC_INVERSE_MACROS","automaticInverseOf","canFindInverseOfAutomatically","validInverseReflection","name1","options1","activeResource1","__extendArrayParam","__type","__className","__deriveClassName","__foreignKey","__deriveForeignKey","__foreignType","__primaryKey","__activeResourcePrimaryKey","__inverseName","hasInverse","__inverseOf","associatedClass","inverseRelationship","belongsTo","__automaticInverseOf","inverseName","inverseReflection","HasManyAssociation","HasOneAssociation","BelongsToPolymorphicAssociation","BelongsToAssociation","Relation","__newRelation","__extendObjectParam","a","arg","number","__extendValueParam","save","conditions","where","relation","limit","offset","__initializeFields","JSON","Association","owner","__loaded","loadTarget","__canFindTarget","__findTarget","loadedTarget","catch","__invertibleFor","__inverseReflectionFor","addToTarget","newResource","__foreignKeyPresent","base1","hasOne","foreignKey","activeResourcePrimaryKey","checkImmutable","fn","newValue","result","val","__creationAttributes","hasAttribute","buildAssociation","CollectionAssociation","arguments","proxy","CollectionProxy","resources","__executeOnCloneIfImmutable","localAssignment","persistedResources","__raiseOnTypeMismatch","__persistAssignment","attr","__concatResources","__buildResource","noop","__createResource","__persistConcat","__persistDelete","__removeResources","replaceOnTarget","setInverseInstance","queryParamsForReflection","other","insertResource","__deleteResources","klassQueryParams","v2","cached","concat","__resourceRelatedParams","reload","__setOwnerAttributes","difference","SingularAssociation","raise","__getResource","__removeTarget","__nullifyOwnerAttributes","updated","__replaceKeys","__removeKeys","associationPrimaryKey","foreignType","model","defineAccessors","defineReaders","defineWriters","capitalize","constructable","defineConstructors","errorsByTarget","targetObject","errorsForTarget","baseErrors","relationshipResource","clear","assignAttributes"],"mappings":"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","sourcesContent":["var ActiveResource;\n\nif (typeof window !== \"undefined\") {\n  window.Promise = es6Promise.Promise;\n}\n\nexport default ActiveResource = class ActiveResource {};\n\nimport ActiveResource from './active-resource';\n\n// Extends a klass with a mixin's members, so the klass itself will have those members\n\n// @param [Class] klass the object to extend the mixin into\n// @param [Class,Object] mixin the methods/members to extend into the obj\nActiveResource.extend = function(klass, mixin) {\n  var method, name, results;\n  results = [];\n  for (name in mixin) {\n    method = mixin[name];\n    if (!method.__excludeFromExtend) {\n      results.push(klass[name] = method);\n    } else {\n      results.push(void 0);\n    }\n  }\n  return results;\n};\n\n// Adds a mixin's members to a klass prototype, so instances of that klass will\n// have those members\n\n// @param [Class] klass the klass to include mixin members in when instantiated\n// @param [Class,Object] mixin the methods/members to include into the klass instances\nActiveResource.include = function(klass, mixin) {\n  return this.extend(klass.prototype, mixin);\n};\n\n(function() {\n  // Provides support methods for determing the type (also known as klass) of different objects in\n  // the ActiveResource framework\n  ActiveResource.prototype.Typing = class Typing {\n    // Returns the class of the object\n\n    // @return [Class] the class for the oject\n    static klass() {\n      return this.constructor;\n    }\n\n    // Determines if this object is of type `klass`\n\n    // @return [Boolean] whether or not the object is of type klass\n    static isA(klass) {\n      var match, object;\n      object = this;\n      match = object.constructor === klass;\n      while (!(match || ((object = object.constructor.__super__) == null))) {\n        match = object.constructor === klass;\n      }\n      return match;\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // Creates a library that holds resources classes\n\n  // @param [String] baseUrl the base url for the resource server\n  // @option [Object] headers the headers to send with each request made in this library\n  // @option [Interface] interface the interface to use when making requests and building responses\n  // @option [Object] constantizeScope the scope to use when calling #constantize\n  // @option [Boolean] immutable if true, resources will act as immutable structures\n  // @option [Boolean] includePolymorphicRepeats if true, primary data’s relationships will send polymorphic owner data to\n  //   the server despite that data also being the primary data (a repetition, some servers don't make the assumption)\n  // @option [Boolean] strictAttributes if true, only attributes defined in a class via the static attributes method will\n  //   be returned from resource.attributes()\n  // @return [ResourceLibrary] the created resource library\n  ActiveResource.createResourceLibrary = function(baseUrl, options = {}) {\n    var ResourceLibrary;\n    return ResourceLibrary = (function() {\n      var Base, base, resourceLibrary;\n\n      class ResourceLibrary {\n        // Constantizes a className string into an actual ActiveResource::Base class\n\n        // @note If constantizeScope is null, checks the property on the resource library,\n        //   then on its prototype\n\n        // @note Throws exception if klass cannot be found\n\n        // @param [String] className the class name to look for a constant with\n        // @return [Class] the class constant corresponding to the name provided\n        static constantize(className) {\n          var i, klass, len, scope, v;\n          klass = null;\n          if (!_.isUndefined(className) && !_.isNull(className)) {\n            scope = this.constantizeScope && _.values(this.constantizeScope) || _.flatten([_.values(this), _.values(this.prototype)]);\n            for (i = 0, len = scope.length; i < len; i++) {\n              v = scope[i];\n              if (_.isObject(v) && v.className === className) {\n                klass = v;\n              }\n            }\n          }\n          if (klass == null) {\n            throw `NameError: klass ${className} does not exist`;\n          }\n          return klass;\n        }\n\n        // Creates an ActiveResource::Base class from klass provided\n\n        // @param [Class] klass the klass to create into an ActiveResource::Base class in the library\n        // @return [Class] the klass now inheriting from ActiveResource::Base\n        static createResource(klass) {\n          var extend;\n          extend = \n        function(child, parent) {\n          for (var key in parent) { if (parent.hasOwnProperty(key)) child[key] = parent[key]; }\n          child.prototype = Object.create(parent.prototype);\n          child.prototype.constructor = child;\n          child.__super__ = parent.prototype;\n          return child;\n        }\n      ;\n          console.log('----', this.Base.prototype);\n          klass = extend(klass, this.Base);\n          klass.className || (klass.className = klass.name);\n          klass.queryName || (klass.queryName = _.pluralize(s.underscored(klass.className)));\n          if (typeof klass.define === \"function\") {\n            klass.define();\n          }\n          (this.constantizeScope || this)[klass.className] = klass;\n          return klass;\n        }\n\n      };\n\n      ResourceLibrary.baseUrl = baseUrl.charAt(baseUrl.length - 1) === '/' ? baseUrl : `${baseUrl}/`;\n\n      ResourceLibrary.headers = options.headers;\n\n      ResourceLibrary.interface = new (options.interface || ActiveResource.Interfaces.JsonApi)(ResourceLibrary);\n\n      ResourceLibrary.constantizeScope = options['constantizeScope'];\n\n      ResourceLibrary.immutable = options.immutable;\n\n      ResourceLibrary.includePolymorphicRepeats = options.includePolymorphicRepeats;\n\n      ResourceLibrary.strictAttributes = options.strictAttributes;\n\n      base = ResourceLibrary.immutable ? ActiveResource.prototype.Immutable.prototype.Base : ActiveResource.prototype.Base;\n\n      resourceLibrary = ResourceLibrary;\n\n      ResourceLibrary.Base = Base = (function() {\n        class Base extends base {};\n\n        Base.resourceLibrary = resourceLibrary;\n\n        return Base;\n\n      }).call(this);\n\n      return ResourceLibrary;\n\n    }).call(this);\n  };\n\n}).call(this);\n\n(function() {\n  // Abstract class for defining an interface between a server and ActiveResource\n  // TODO: Ensure contentType is consistent in requests/responses\n  ActiveResource.Interfaces = ActiveResource.prototype.Interfaces = (function() {\n    class Interfaces {};\n\n    Interfaces.prototype.Base = (function() {\n      class Base {\n        constructor(resourceLibrary) {\n          this.resourceLibrary = resourceLibrary;\n          this.axios = axios.create({\n            headers: _.extend(this.resourceLibrary.headers || {}, {\n              'Content-Type': this.constructor.contentType\n            })\n          });\n          this.axios.interceptors.response.use((config) => {\n            return config;\n          }, (error) => {\n            if (error.response.status === 408 || error.code === 'ECONNABORTED') {\n              return Promise.reject({\n                response: {\n                  data: {\n                    errors: [\n                      {\n                        code: 'timeout',\n                        detail: `Timeout occurred while loading ${error.config.url}`\n                      }\n                    ]\n                  }\n                }\n              });\n            } else {\n              return Promise.reject(error);\n            }\n          });\n        }\n\n        request(url, method, data) {\n          var options;\n          options = {\n            responseType: 'json',\n            method: method,\n            url: url\n          };\n          if (method === 'GET') {\n            options.params = data;\n            options.paramsSerializer = function(params) {\n              return Qs.stringify(params, {\n                arrayFormat: 'brackets'\n              });\n            };\n          } else {\n            options.data = data;\n          }\n          return this.axios.request(options);\n        }\n\n        // Make GET request\n\n        // @param [String] url the url to query\n        // @param [Object] queryParams query params to send to the server\n        get(url, queryParams) {\n          throw '#get not implemented on base interface';\n        }\n\n        // Make POST request\n\n        // @param [String] url the url to query\n        // @param [Object] resourceData the resourceData to send to the server\n        // @param [Object] options options that may modify the data sent to the server\n        post(url, resourceData, options) {\n          throw '#post not implemented on base interface';\n        }\n\n        // Make PATCH request\n\n        // @param [String] url the url to query\n        // @param [Object] resourceData the resourceData to send to the server\n        // @param [Object] options options that may modify the data sent to the server\n        patch(url, resourceData, options) {\n          throw '#patch not implemented on base interface';\n        }\n\n        // Make PUT request\n\n        // @param [String] url the url to query\n        // @param [Object] resourceData the resourceData to send to the server\n        // @param [Object] options options that may modify the data sent to the server\n        put(url, resourceData, options) {\n          throw '#put not implemented on base interface';\n        }\n\n        // Make DELETE request\n\n        // @param [String] url the url to query\n        // @param [Object] resourceData the resourceData to send to the server\n        // @param [Object] options options that may modify the data sent to the server\n        delete(url, resourceData, options) {\n          throw '#delete not implemented on base interface';\n        }\n\n      };\n\n      Base.contentType = 'application/json';\n\n      return Base;\n\n    }).call(this);\n\n    return Interfaces;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Implements an interface according the JSON API standard defined by (http://jsonapi.org/format/)\n\n  // @example JSON API format\n  //   response = {\n  //     data: {\n  //       id: \"10\",\n  //       type: \"merchants\", # plural type name\n  //       attributes: {\n  //         name: \"...\",\n  //         balance: \"...\",\n  //       },\n  //       links: {\n  //         self: \"https://app.getoccasion.com/api/v1/merchants/10\"\n  //       },\n  //       relationships: {\n  //         products: [\n  //           { id: \"1202\", type: \"products\" },\n  //           { id: \"1203\", type: \"products\" }\n  //         ]\n  //       }\n  //     },\n  //     included: [\n  //       { id: \"1202\", type: \"products\", attributes: { title: \"...\" } },\n  //       { id: \"1203\", type: \"products\", attributes: { title: \"...\" } }\n  //     ]\n  //   }\n\n  ActiveResource.Interfaces.JsonApi = ActiveResource.prototype.Interfaces.prototype.JsonApi = (function() {\n    class JsonApi extends ActiveResource.prototype.Interfaces.prototype.Base {\n      // Makes an HTTP request to a url with data\n\n      // @note Uses base request, but checks to make sure response is in JSON API format\n\n      // @param [String] url the url to query\n      // @param [String] method the HTTP verb to use for the request\n      // @param [Object] data the data to send to the server\n      request(url, method, data) {\n        return super.then(function(response) {\n          var ref;\n          if (!((((ref = response.data) != null ? ref.data : void 0) != null) || response.status === 204)) {\n            throw `Response from ${url} was not in JSON API format`;\n          }\n          return response.data;\n        });\n      }\n\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n      //                        FORMAT CONVERSION FUNCTIONS\n      //                  (convert to/from underscored/camelcase)\n      //               JSON format / Javascript format respectively\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n\n      // Converts an object's attributes to underscore format\n\n      // @note Usually the attributes are in camelCase format, the standard for Javascript\n\n      // @param [Object] the object to convert the attributes of to underscore format\n      // @return [Object] the object with attributes in underscore format\n      toUnderscored(object) {\n        var k, underscored, v;\n        underscored = {};\n        for (k in object) {\n          v = object[k];\n          underscored[s.underscored(k)] = _.isArray(v) ? _.map(v, (i) => {\n            return this.toUnderscored(i);\n          }) : _.isObject(v) && !(typeof v.isA === \"function\" ? v.isA(ActiveResource.prototype.Base) : void 0) && !(typeof v.isA === \"function\" ? v.isA(ActiveResource.prototype.Collection) : void 0) && !_.isDate(v) ? this.toUnderscored(v) : v;\n        }\n        return underscored;\n      }\n\n      // Converts an object's attributes to camelCase format\n\n      // @note Usually the attributes are in underscore format, the standard for data\n      //   from a Rails server\n\n      // @param [Object] the object to convert the attributes of to camelCase format\n      // @return [Object] the object with attributes in camelCase format\n      toCamelCase(object) {\n        var camelized, k, v;\n        camelized = {};\n        for (k in object) {\n          v = object[k];\n          camelized[s.camelize(k)] = _.isArray(v) ? _.map(v, (i) => {\n            if (_.isObject(i)) {\n              return this.toCamelCase(i);\n            } else {\n              return i;\n            }\n          }) : _.isObject(v) && !(typeof v.isA === \"function\" ? v.isA(ActiveResource.prototype.Base) : void 0) && !(typeof v.isA === \"function\" ? v.isA(ActiveResource.prototype.Collection) : void 0) ? this.toCamelCase(v) : v;\n        }\n        return camelized;\n      }\n\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n      //                 JSONAPI GET REQUEST FORMATTING FUNCTIONS\n      //                 (build sparse fieldsets, include trees)\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n\n      // Takes in an object of filter key/value pairs and builds them into a JSON API filter object\n\n      // @note Used in constructing queryParams of GET queries\n      // @note If value is an ActiveResource, it will be transformed to use the resource's primaryKey\n\n      // @param [Object] filters the object containing filter data to be transformed\n      // @return [Object] the transformed filters\n      buildFilters(filters) {\n        return this.toUnderscored(_.mapObject(filters, function(value) {\n          if (typeof value.isA === \"function\" ? value.isA(ActiveResource.prototype.Base) : void 0) {\n            return value[value.klass().primaryKey];\n          } else {\n            return value;\n          }\n        }));\n      }\n\n      // Takes in an object of modelName/fieldArray pairs and joins the fieldArray into a string\n\n      // @note Used in constructing queryParams of GET queries\n\n      // @example\n      //   { order: ['id', 'updatedAt'] } # => { order: 'id,updated_at' }\n\n      // @param [Object] fields the object containing field data to be built into a fieldSet\n      // @return [Object] the built field set\n\n      // 1. Go through each key of the object, map its array of fields to underscored fields\n      // 2. Take the mapped array of fields and join them, replacing the value of the key with the joined string\n      buildSparseFieldset(fields) {\n        return this.toUnderscored(_.mapObject(fields, function(fieldArray) {\n          return _.map(fieldArray, function(f) {\n            return s.underscored(f);\n          }).join();\n        }));\n      }\n\n      // Takes in an array of include objects (strings, nested strings in objects) and turns them into a\n      // dotted include tree\n\n      // @note Used in constructing queryParams of GET queries\n\n      // @example\n      //   ['merchant','products'] # => 'merchant,products'\n\n      // @example\n      //   ['merchant',{ products: ['orders','venue'] }] # => 'merchant,products.orders,products.venue'\n\n      // @param [Object] includes the array containing includes to build into an include tree\n      // @return [Object] the built include tree\n\n      // 1. Iterate over each include, adding each as a formatted string to includeStrArray\n      // 2. If include is object, format it by passing it into function buildNestedIncludes that\n      //    takes an object { transactions: ... } and recurses over it to produce an array of\n      //    strings like ['transactions.X','transactions.Y']\n      //    * The object can be of three forms:\n      //      1. { transactions: 'include' }\n      //      2. { transactions: ['includes','includes2'] }\n      //      3. { transactions: { deeperInclude: ... } }\n      //    * If of form 1 or 2, it returns an array of strings with the modelName followed by the include name\n      //      ['transactions.includes','transactions.includes2']\n      //    * If of form 3, it recurses, passing the value { deeperInclude: ... } into buildNestedIncludes and\n      //      eventually returning an array of strings ['transactions.deeperInclude.X','transactions.deeperInclude.Y']\n      // 3. If include is string, it is formatted\n      // 4. Return the includeStrArray as a ',' joined string\n      buildIncludeTree(includes) {\n        var buildNestedIncludes;\n        buildNestedIncludes = function(object) {\n          var includeCollection, modelName, value;\n          modelName = s.underscored(_.keys(object)[0]);\n          value = _.values(object)[0];\n          includeCollection = ActiveResource.prototype.Collection.build([value]).flatten().map(function(item) {\n            if (_.isString(item)) {\n              return _.map(item.split(','), function(i) {\n                return s.underscored(i);\n              });\n            } else if (_.isObject(item)) {\n              return buildNestedIncludes(item);\n            }\n          }).flatten();\n          return includeCollection.map(function(i) {\n            return `${modelName}.${i}`;\n          }).toArray();\n        };\n        return ActiveResource.prototype.Collection.build(includes).inject([], function(includeStrArray, include) {\n          if (_.isObject(include)) {\n            includeStrArray.push(...buildNestedIncludes(include));\n            return includeStrArray;\n          } else {\n            includeStrArray.push(s.underscored(include));\n            return includeStrArray;\n          }\n        }).join();\n      }\n\n      // Builds a list of sorting params based on an object that defines asc/desc ordering\n\n      // @example\n      //   { updatedAt: 'asc' } # => 'updated_at'\n\n      // @example\n      //   { createdAt: 'desc', updatedAt: 'asc' }\n      //   # => '-created_at,updated_at'\n\n      // @param [Object] sortObject the object defining sorting columns\n      // @return [String] a JSON API formatted string that defines sorting\n      buildSortList(sortObject) {\n        var column, dir, output;\n        output = [];\n        for (column in sortObject) {\n          dir = sortObject[column];\n          if (dir === 'asc') {\n            output.push(s.underscored(column));\n          } else if (dir === 'desc') {\n            output.push(`-${s.underscored(column)}`);\n          }\n        }\n        return output.join(',');\n      }\n\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n      //                 JSONAPI POST REQUEST FORMATTING FUNCTIONS\n      //          builds resources into a resource document to send in POST,\n      //                     PATCH, PUT, and DELETE requests\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n\n      // Builds a resource identifier (id + type) from a resource\n\n      // @param [ActiveResource::Base] the resource to convert to a resource identifier\n      // @return [Object] the resource identifier for the object\n      buildResourceIdentifier(resource) {\n        var identifier, primaryKeyValue;\n        identifier = {\n          type: resource.klass().queryName\n        };\n        if ((primaryKeyValue = resource[resource.klass().primaryKey])) {\n          identifier[resource.klass().primaryKey] = primaryKeyValue.toString();\n        }\n        return identifier;\n      }\n\n      // Builds a relationship object for a resource, given a resource\n\n      // @param [ActiveResource::Base] resource the resource to get relationship data from\n      // @return [Object] the built relationship object for the resource\n      buildResourceRelationships(resource, relationships, onlyChanged = false) {\n        var output;\n        output = {};\n        _.each(relationships, (relationship) => {\n          var reflection, target;\n          reflection = resource.klass().reflectOnAssociation(relationship);\n          target = resource.association(reflection.name).target;\n          if (!onlyChanged && ((reflection.collection() && target.empty()) || (target == null))) {\n            return;\n          }\n          return output[s.underscored(reflection.name)] = {\n            data: this.buildResourceDocument({\n              resourceData: target,\n              onlyResourceIdentifiers: !reflection.autosave(),\n              onlyChanged: onlyChanged,\n              parentReflection: reflection.polymorphic() ? reflection.polymorphicInverseOf(target.klass()) : reflection.inverseOf()\n            })\n          };\n        });\n        return output;\n      }\n\n      // Builds a resource document in JSON API format to be sent to the server in persistence calls\n\n      // @param [ActiveResource::Base,Array<ActiveResource::Base>] resourceData the resourceData to convert to a resource document\n      // @param [Boolean] onlyResourceIdentifiers if true, only renders the primary key/type (a resource identifier)\n      //   if false, also renders attributes and relationships\n      // @return [Array] an array of resource identifiers, possibly with attributes/relationships\n      buildResourceDocument({resourceData, onlyResourceIdentifiers, onlyChanged, parentReflection}) {\n        var data;\n        onlyResourceIdentifiers = onlyResourceIdentifiers || false;\n        onlyChanged = onlyChanged || false;\n        data = ActiveResource.prototype.Collection.build(resourceData).compact().map((resource) => {\n          var attributes, changedFields, documentResource, relationships;\n          documentResource = this.buildResourceIdentifier(resource);\n          if (!onlyResourceIdentifiers) {\n            attributes = _.omit(resource.attributes({\n              readWrite: true\n            }), resource.klass().primaryKey);\n            relationships = _.keys(resource.klass().reflections());\n            if (parentReflection) {\n              if (!(parentReflection.polymorphic() && this.resourceLibrary.includePolymorphicRepeats)) {\n                relationships = _.without(relationships, parentReflection.name);\n              }\n            }\n            if (onlyChanged) {\n              changedFields = resource.changedFields().toArray();\n              attributes = _.pick(attributes, ...changedFields);\n              relationships = _.intersection(relationships, changedFields);\n            }\n            documentResource['attributes'] = this.toUnderscored(attributes);\n            documentResource['relationships'] = this.buildResourceRelationships(resource, relationships, onlyChanged);\n          }\n          return documentResource;\n        });\n        if (_.isArray(resourceData) || (_.isObject(resourceData) && (typeof resourceData.isA === \"function\" ? resourceData.isA(ActiveResource.prototype.Collection) : void 0))) {\n          return data.toArray();\n        } else {\n          return data.first() || null;\n        }\n      }\n\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n      //                 JSONAPI RESPONSE CONSTRUCTION FUNCTIONS\n      //          (takes JSONAPI responses and builds them into resources)\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n\n      // Builds a \"resource\" from the JSON API into an ActiveResource of type `type`\n\n      // @example\n      //   Before: Object{ id: '100', type: 'orders', attributes: { verification_code: '...' }, relationships: { ... } }\n      //   After:  Order{ id: 100, verificationCode: '...' }\n\n      // @param [Object] data the data of the resource to instantiate\n      // @param [Array] includes the array of includes to search for resource relationships in\n      // @param [ActiveResource::Base] existingResource an existingResource to use instead of building a new one\n      // @param [ActiveResource::Base] parentRelationship the owner relationship name/resource that is building this resource\n      // @return [ActiveResource] the built ActiveResource\n      buildResource(data, includes, {existingResource, parentRelationship}) {\n        var attributes, resource;\n        resource = existingResource || this.resourceLibrary.constantize(_.singularize(s.classify(data['type']))).build();\n        attributes = data['attributes'] || {};\n        if (data[resource.klass().primaryKey]) {\n          attributes[resource.klass().primaryKey] = data[resource.klass().primaryKey].toString();\n        }\n        if (parentRelationship != null) {\n          attributes = _.extend(attributes, parentRelationship);\n        }\n        attributes = this.addRelationshipsToFields(attributes, data['relationships'], includes, resource);\n        attributes = this.toCamelCase(attributes);\n        resource.__assignFields(attributes);\n        resource.__links = _.extend(resource.links(), data['links']);\n        resource.klass().reflectOnAllAssociations().each(function(reflection) {\n          var association, ref, ref1, ref2, ref3, relationship, relationshipEmpty, relationshipLinks, selfLink, url_safe_reflection_name;\n          association = resource.association(reflection.name);\n          if ((relationshipLinks = (ref = data['relationships']) != null ? (ref1 = ref[s.underscored(reflection.name)]) != null ? ref1['links'] : void 0 : void 0) != null) {\n            association.__links = _.extend(association.links(), _.mapObject(relationshipLinks, (l) => {\n              return ActiveResource.prototype.Links.__constructLink(l);\n            }));\n          } else if ((selfLink = resource.links()['self']) != null) {\n            url_safe_reflection_name = s.underscored(reflection.name);\n            association.__links = {\n              self: ActiveResource.prototype.Links.__constructLink(selfLink, 'relationships', url_safe_reflection_name),\n              related: ActiveResource.prototype.Links.__constructLink(selfLink, url_safe_reflection_name)\n            };\n          }\n          relationshipEmpty = _.isObject(relationship = (ref2 = data['relationships']) != null ? (ref3 = ref2[s.underscored(reflection.name)]) != null ? ref3['data'] : void 0 : void 0) ? _.keys(relationship).length === 0 : relationship != null ? relationship.length === 0 : true;\n          if (_.has(attributes, reflection.name) || relationshipEmpty) {\n            return association.loaded(true);\n          }\n        });\n        resource.__executeCallbacks('afterRequest');\n        return resource;\n      }\n\n      // Interprets all the relationships identified in a resource, searching the `included` part of the response\n      //   for each object of each relationship and building it into the resource attributes\n\n      // @example singular relationship\n      //   object = {\n      //     id: '10', type: 'orders',\n      //     attributes: { verification_code: '...' },\n      //     relationships: {\n      //       product: { data: { id: '1202', type: 'products' } }\n      //     }\n      //   }\n      //  included = [\n      //    { id: '1202', type: 'products', attributes: { title: '...' } }\n      //  ]\n\n      //   sets attributes['product'] = Product{ id: 1202, title: '...' }\n      //   @note (this is the instantiated ActiveResource class for the include)\n\n      // @example plural relationship\n      //   object = {\n      //     id: '10', type: 'merchants',\n      //     attributes: { name: '...' },\n      //     relationships: {\n      //       products: { data: [{ id: '1202', type: 'products' },{ id: '1203', type: 'products' }] }\n      //     }\n      //   }\n      //  included = [\n      //    { id: '1202', type: 'products', attributes: { title: '...' } },\n      //    { id: '1202', type: 'products', attributes: { title: '...' } }\n      //  ]\n\n      //   sets attributes['products'] = [\n      //     Product{ id: 1202, title: '...' },\n      //     Product{ id: 1203, title: '...' }\n      //   ]\n\n      // @param [Object] attributes the attribute object to build relationships into\n      // @param [Object] relationships the object defining the relationships to be built into `attributes`\n      // @param [Array] includes the array of includes to search for relationship resources in\n      // @param [ActiveResource::Base] resource the resource to get the primary key of\n      // @return [Object] the attributes with all relationships built into it\n      addRelationshipsToFields(attributes, relationships, includes, resource) {\n        _.each(relationships, (relationship, relationshipName) => {\n          var include, reflection, relationshipItems;\n          if ((reflection = resource.klass().reflectOnAssociation(s.camelize(relationshipName)))) {\n            if (reflection.collection()) {\n              relationshipItems = ActiveResource.prototype.Collection.build(relationship['data']).map((relationshipMember, index) => {\n                return this.findResourceForRelationship(relationshipMember, includes, resource, reflection, index);\n              }).compact();\n              if (!(typeof relationshipItems.empty === \"function\" ? relationshipItems.empty() : void 0)) {\n                return attributes[relationshipName] = relationshipItems;\n              }\n            } else if (relationship['data'] != null) {\n              include = this.findResourceForRelationship(relationship['data'], includes, resource, reflection);\n              if (include != null) {\n                return attributes[relationshipName] = include;\n              }\n            }\n          }\n        });\n        return attributes;\n      }\n\n      // Finds a resource in the 'included' collection of the response, based on relationship data taken from another\n      //   resource, and builds it into an ActiveResource\n      // @note If an include is not found, but relationship data is present, the resource identifiers are matched to\n      //   resources already on the existing relationship so that these resources will be moved into __fields\n\n      // @example\n      //   relationshipData = { id: '1202', type: 'products' }\n      //   includes = [{ id: '102', type: 'orders', attributes: { ... }, { id: '1202', type: 'products', attributes: { ... } }]\n      //   returns { id: '1202', type: 'products', ... }\n\n      // @param [Object] relationshipData the data defining the relationship to match an include to\n      // @param [Array] includes the array of includes to search for relationships in\n      // @param [ActiveResource::Base] resource the resource to get the primary key of\n      // @param [Reflection] reflection the reflection for the relationship\n      // @param [Integer] index the index of the relationship data (only in collection relationships)\n      // @return [ActiveResource::Base] the include built into an ActiveResource::Base\n      findResourceForRelationship(relationshipData, includes, resource, reflection, index) {\n        var buildResourceOptions, findConditions, include, parentReflection, potentialTarget, primaryKey, target;\n        primaryKey = resource.klass().primaryKey;\n        findConditions = {\n          type: relationshipData.type\n        };\n        findConditions[primaryKey] = relationshipData[primaryKey];\n        buildResourceOptions = {};\n        if ((parentReflection = reflection.inverseOf()) != null) {\n          buildResourceOptions.parentRelationship = {};\n          buildResourceOptions.parentRelationship[parentReflection.name] = resource;\n        }\n        include = _.findWhere(includes, findConditions);\n        if (reflection.collection()) {\n          target = resource.association(reflection.name).target.detect((t) => {\n            return t[primaryKey] === findConditions[primaryKey];\n          }) || resource.association(reflection.name).target.get(index);\n        } else if ((potentialTarget = resource.association(reflection.name).target) != null) {\n          if (!reflection.polymorphic() || potentialTarget.klass().queryName === findConditions['type']) {\n            target = potentialTarget;\n          }\n        }\n        if (target != null) {\n          buildResourceOptions.existingResource = target;\n        }\n        if ((target != null) || (include != null)) {\n          return this.buildResource(include || {}, includes, buildResourceOptions);\n        }\n      }\n\n      // Merges the changes made from a POST/PUT/PATCH call into the resource that called it\n\n      // @param [Object] response The response to pull persisted changes from\n      // @param [ActiveResource::Base] the resource to merge persisted changes into\n      // @return [ActiveResource::Base] the resource, now persisted, with updated changes\n      mergePersistedChanges(response, resource) {\n        return this.buildResource(response['data'], response['included'], {\n          existingResource: resource\n        });\n      }\n\n      // Adds errors in making a POST/PUT/PATCH call into the resource that called it\n\n      // @note The format for resource errors is as follows:\n      //   {\n      //     \"errors\": [\n      //       {\n      //         \"source\": { \"pointer\": \"/data/attributes/title\" },\n      //         \"code\": \"blank\",\n      //         \"detail\": \"Title cannot be blank.\"\n      //       },\n      //       {\n      //         \"source\": { \"pointer\": \"/data/relationships/product\" },\n      //         \"code\": \"blank\",\n      //         \"detail\": \"Product cannot be blank.\"\n      //       },\n      //       {\n      //         \"source\": { \"pointer\": \"/data/relationships/product/data/attributes/title\" },\n      //         \"code\": \"blank\",\n      //         \"detail\": \"Title cannot be blank.\"\n      //       }\n      //     ]\n      //   }\n\n      // @param [Object] response The response to pull errors from\n      // @param [ActiveResource::Base] the resource to add errors onto\n      // @return [ActiveResource::Base] the unpersisted resource, now with errors\n      resourceErrors(resource, errors) {\n        var errorCollection;\n        errorCollection = ActiveResource.Collection.build(errors).map(function(error) {\n          var field;\n          field = [];\n          if (error['source']['pointer'] === '/data') {\n            field.push('base');\n          } else {\n            _.each(error['source']['pointer'].split('/data'), function(i) {\n              var m;\n              if ((m = i.match(/\\/(attributes|relationships|)\\/(\\w+)/)) != null) {\n                return field.push(s.camelize(m[2]));\n              }\n            });\n          }\n          return resource.errors().__buildError(field.join('.'), s.camelize(error['code']), error['detail']);\n        });\n        resource.errors().propagate(errorCollection);\n        return resource;\n      }\n\n      // De-serializes errors from the error response to GET and DELETE requests,\n      // which will be of the form: { source: { parameter: '...' } }\n\n      // @note The format for parameter errors is as follows:\n      //   {\n      //     \"errors\": [\n      //       {\n      //         \"source\": { \"parameter\": \"a_parameter\" },\n      //         \"code\": \"invalid\",\n      //         \"detail\": \"a_parameter was invalid.\"\n      //       }\n      //     ]\n      //   }\n\n      // @param [Array] errors the errors to de-serialize\n      // @return [Collection] the collection of errors\n      parameterErrors(errors) {\n        return ActiveResource.prototype.Collection.build(errors).map(function(error) {\n          var out, ref;\n          out = {\n            detail: error['detail'],\n            message: error['detail']\n          };\n          if (((ref = error['source']) != null ? ref['parameter'] : void 0) != null) {\n            out['parameter'] = s.camelize(error['source']['parameter']);\n          }\n          out['code'] = s.camelize(error['code']);\n          return out;\n        });\n      }\n\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n      //                          HTTP REQUEST METHODS\n      //          (takes JSONAPI responses and builds them into resources)\n      //---------------------------------------------------------------------------\n      //---------------------------------------------------------------------------\n\n      // Make GET request\n\n      // @param [String] url the url to query\n      // @param [Object] queryParams query params to send to the server\n      get(url, queryParams = {}) {\n        var _this, data;\n        data = {};\n        if (queryParams['filter'] != null) {\n          data['filter'] = this.buildFilters(queryParams['filter']);\n        }\n        if (queryParams['fields'] != null) {\n          data['fields'] = this.buildSparseFieldset(queryParams['fields']);\n        }\n        if (queryParams['include'] != null) {\n          data['include'] = this.buildIncludeTree(queryParams['include']);\n        }\n        if (queryParams['sort'] != null) {\n          data['sort'] = this.buildSortList(queryParams['sort']);\n        }\n        if (queryParams['page'] != null) {\n          data['page'] = queryParams['page'];\n        }\n        if (queryParams['limit'] != null) {\n          data['limit'] = queryParams['limit'];\n        }\n        if (queryParams['offset'] != null) {\n          data['offset'] = queryParams['offset'];\n        }\n        _this = this;\n        return this.request(url, 'GET', data).then(function(response) {\n          var built;\n          built = ActiveResource.prototype.CollectionResponse.build(_.flatten([response.data])).map(function(object) {\n            object = _this.buildResource(object, response.included, {});\n            object.assignResourceRelatedQueryParams(queryParams);\n            return object;\n          });\n          built.links(response.links);\n          if (_.isArray(response.data)) {\n            return built;\n          } else {\n            return built.first();\n          }\n        }, function(errors) {\n          return Promise.reject(_this.parameterErrors(errors.response.data['errors']));\n        });\n      }\n\n      // Make POST request\n\n      // @param [String] url the url to query\n      // @param [Object] resourceData the resourceData to send to the server\n      // @param [Object] options options that may modify the data sent to the server\n      // @option [Boolean] onlyResourceIdentifiers if false, render the attributes and relationships\n      //   of each resource into the resource document\n      post(url, resourceData, options = {}) {\n        var _this, data, queryParams;\n        data = {\n          data: this.buildResourceDocument({\n            resourceData: resourceData,\n            onlyResourceIdentifiers: options['onlyResourceIdentifiers']\n          })\n        };\n        if (!options['onlyResourceIdentifiers']) {\n          queryParams = resourceData.queryParams();\n          if (queryParams['fields'] != null) {\n            data['fields'] = this.buildSparseFieldset(queryParams['fields']);\n          }\n          if (queryParams['include'] != null) {\n            data['include'] = this.buildIncludeTree(queryParams['include']);\n          }\n        }\n        _this = this;\n        return this.request(url, 'POST', data).then(function(response) {\n          if (options['onlyResourceIdentifiers']) {\n            return response;\n          } else {\n            return _this.mergePersistedChanges(response, resourceData);\n          }\n        }, function(errors) {\n          if (options['onlyResourceIdentifiers']) {\n            return Promise.reject(errors);\n          } else {\n            return Promise.reject(_this.resourceErrors(resourceData, errors.response.data['errors']));\n          }\n        });\n      }\n\n      // Make PATCH request\n\n      // @param [String] url the url to query\n      // @param [Object] resourceData the resourceData to send to the server\n      // @param [Object] options options that may modify the data sent to the server\n      //   @see #post\n      patch(url, resourceData, options = {}) {\n        var _this, data, queryParams;\n        data = {\n          data: this.buildResourceDocument({\n            resourceData: resourceData,\n            onlyResourceIdentifiers: options['onlyResourceIdentifiers'],\n            onlyChanged: true\n          })\n        };\n        if (!options['onlyResourceIdentifiers']) {\n          queryParams = resourceData.queryParams();\n          if (queryParams['fields'] != null) {\n            data['fields'] = this.buildSparseFieldset(queryParams['fields']);\n          }\n          if (queryParams['include'] != null) {\n            data['include'] = this.buildIncludeTree(queryParams['include']);\n          }\n        }\n        _this = this;\n        return this.request(url, 'PATCH', data).then(function(response) {\n          if (options['onlyResourceIdentifiers']) {\n            return response;\n          } else {\n            return _this.mergePersistedChanges(response, resourceData);\n          }\n        }, function(errors) {\n          if (options['onlyResourceIdentifiers']) {\n            return Promise.reject(errors);\n          } else {\n            return Promise.reject(_this.resourceErrors(resourceData, errors.response.data['errors']));\n          }\n        });\n      }\n\n      // Make PUT request\n\n      // @param [String] url the url to query\n      // @param [Object] resourceData the resourceData to send to the server\n      // @param [Object] options options that may modify the data sent to the server\n      //   @see #post\n      put(url, resourceData, options = {}) {\n        var _this, data, queryParams;\n        data = {\n          data: this.buildResourceDocument({\n            resourceData: resourceData,\n            onlyResourceIdentifiers: options['onlyResourceIdentifiers']\n          })\n        };\n        if (!options['onlyResourceIdentifiers']) {\n          queryParams = resourceData.queryParams();\n          if (queryParams['fields'] != null) {\n            data['fields'] = this.buildSparseFieldset(queryParams['fields']);\n          }\n          if (queryParams['include'] != null) {\n            data['include'] = this.buildIncludeTree(queryParams['include']);\n          }\n        }\n        _this = this;\n        return this.request(url, 'PUT', data).then(function(response) {\n          if (options['onlyResourceIdentifiers']) {\n            return response;\n          } else {\n            return _this.mergePersistedChanges(response, resourceData);\n          }\n        }, function(errors) {\n          if (options['onlyResourceIdentifiers']) {\n            return Promise.reject(errors);\n          } else {\n            return Promise.reject(_this.resourceErrors(resourceData, errors.response.data['errors']));\n          }\n        });\n      }\n\n      // Make DELETE request\n\n      // @note There are two instances where a DELETE request will be made\n      //   1. A resource is to be deleted, by calling `DELETE /api/v1/:type/:id`\n      //     * In this case, the data will simply be {}\n      //   2. A relationship is to have members removed, by calling `DELETE /api/v1/:type/:id/relationships/:relationship`\n      //     * In this case, the data will have to be resource identifiers\n\n      // @param [String] url the url to query\n      // @param [Object] resourceData the resourceData to send to the server\n      // @param [Object] options options that may modify the data sent to the server\n      //   @see #post\n      delete(url, resourceData, options = {}) {\n        var _this, data;\n        data = resourceData != null ? {\n          data: this.buildResourceDocument({\n            resourceData: resourceData,\n            onlyResourceIdentifiers: true\n          })\n        } : {};\n        _this = this;\n        return this.request(url, 'DELETE', data).then(null, function(errors) {\n          if (errors.response.data) {\n            return Promise.reject(_this.parameterErrors(errors.response.data['errors']));\n          } else {\n            return Promise.reject(null);\n          }\n        });\n      }\n\n    };\n\n    JsonApi.contentType = 'application/vnd.api+json';\n\n    return JsonApi;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Adds methods for managing associations, which are built at the instance level\n  // based on reflections stored at the class level of ActiveResources\n  ActiveResource.prototype.Associations = class Associations {\n    // Finds an association on a resource, and creates it if it was not built yet\n    // @note Throws error if association does not exist\n\n    // @param [String] name the name of the association\n    // @return [Association] the association for the resource\n    association(name) {\n      var association, reflection;\n      this.__associations || (this.__associations = {});\n      if ((association = this.__associations[name]) == null) {\n        if ((reflection = this.klass().reflectOnAssociation(name)) == null) {\n          throw `Association ${name} does not exist`;\n        }\n        association = new (reflection.associationClass())(this, reflection);\n        this.__associations[name] = association;\n      }\n      return association;\n    }\n\n    // Builds a one-to-many relationship between an ActiveResource and another collection of ActiveResources\n\n    // @param [String] name the name of the association\n    // @param [Object] options the options to build the association with\n    static hasMany(name, options = {}) {\n      var reflection;\n      reflection = ActiveResource.prototype.Associations.prototype.Builder.prototype.HasMany.build(this, name, options);\n      return ActiveResource.prototype.Reflection.addReflection(this, name, reflection);\n    }\n\n    // Builds a one-to-one relationship between one ActiveResource and another. This should be used\n    // if the class does not contain the foreign_key. If this class contains the foreign_key, you should\n    // use #belongsTo() instead\n\n    // @param [String] name the name of the association\n    // @param [Object] options the options to build the association with\n    static hasOne(name, options = {}) {\n      var reflection;\n      reflection = ActiveResource.prototype.Associations.prototype.Builder.prototype.HasOne.build(this, name, options);\n      return ActiveResource.prototype.Reflection.addReflection(this, name, reflection);\n    }\n\n    // Builds a one-to-one relationship between one ActiveResource and another. This should be used\n    // if the class contains the foreign_key. If the other class contains the foreign_key, you should\n    // use #hasOne() instead\n\n    // @param [String] name the name of the association\n    // @param [Object] options the options to build the association with\n    static belongsTo(name, options = {}) {\n      var reflection;\n      reflection = ActiveResource.prototype.Associations.prototype.Builder.prototype.BelongsTo.build(this, name, options);\n      return ActiveResource.prototype.Reflection.addReflection(this, name, reflection);\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing attributes of resources\n  ActiveResource.prototype.Attributes = class Attributes {\n    // Used to establish attribute fields for a resource class\n    // @note Attribute fields are tracked along with relationships using `klass().fields()`\n    // @see fields.coffee\n\n    // @example Add attributes\n    //   class Order extends MyLibrary.Base {\n    //     static define() {\n    //       this.attributes('price', 'tax')\n    //     }\n    //   }\n\n    // @example Retrieve klass attributes\n    //   resource.klass().attributes()\n\n    // @param [Array<String>] attributes the attributes to add to the list of attributes the class tracks\n    // @return [Collection<String>] the klass attributes\n    attributes(...attributes) {\n      var options;\n      options = {};\n      if (_.isObject(_.last(attributes))) {\n        options = attributes.pop();\n      }\n      if (this.__attributes == null) {\n        this.__attributes = {\n          all: ActiveResource.prototype.Collection.build(),\n          read: ActiveResource.prototype.Collection.build(),\n          readWrite: ActiveResource.prototype.Collection.build()\n        };\n      }\n      if (options.readOnly) {\n        this.__attributes.read.push(...attributes);\n      } else {\n        this.__attributes.readWrite.push(...attributes);\n      }\n      this.__attributes.all.push(...attributes);\n      return this.__attributes;\n    }\n\n    // Checks if the resource has an attribute\n\n    // @param [String] attribute the attribute to check the existence of on the resource\n    // @return [Boolean] whether or not the resource has the attribute\n    static hasAttribute(attribute) {\n      return this.__readAttribute(attribute) != null;\n    }\n\n    // Assigns `attributes` to the resource, using @__assignAttributes to allow this method\n    //   to be overridden easier\n\n    // @param [Object] attributes the attributes to assign\n    static assignAttributes(attributes) {\n      return this.__assignAttributes(attributes);\n    }\n\n    // Retrieves all the attributes of the resource\n\n    // @return [Object] the attributes of the resource\n    static attributes(options = {}) {\n      var k, output, ref, v;\n      output = {};\n      ref = this;\n      for (k in ref) {\n        v = ref[k];\n        if (this.__validAttribute(k, v, options)) {\n          output[k] = v;\n        }\n      }\n      return output;\n    }\n\n    // Reloads all the attributes from the server, using saved @__queryParams\n    // to ensure proper field and include reloading\n\n    // @example\n    //   Order.includes('transactions').last().then (order) ->\n    //     order.transactions.last().amount == 3.0 # TRUE\n\n    //     Transaction.find(order.transactions.last().id).then (transaction) ->\n    //       transaction.update amount: 5, ->\n    //         order.transactions.last().amount == 3.0 # TRUE\n    //         order.reload().then ->\n    //           order.transactions.last().amount == 5.0 # TRUE\n\n    // @return [Promise] a promise to return the reloaded ActiveResource **or** 404 NOT FOUND\n    static reload() {\n      var ref, resource, url;\n      if (!(this.persisted() || ((ref = this.id) != null ? ref.toString().length : void 0) > 0)) {\n        throw 'Cannot reload a resource that is not persisted or has an ID';\n      }\n      resource = this;\n      url = this.links()['self'] || (ActiveResource.prototype.Links.__constructLink(this.links()['related'], this.id.toString()));\n      return this.interface().get(url, this.queryParams()).then(function(reloaded) {\n        resource.__assignFields(reloaded.attributes());\n        resource.klass().reflectOnAllAssociations().each(function(reflection) {\n          var target;\n          target = reloaded.association(reflection.name).reader();\n          if (typeof reflection.collection === \"function\" ? reflection.collection() : void 0) {\n            target = target.toArray();\n          }\n          return resource.association(reflection.name).writer(target, false);\n        });\n        return resource;\n      });\n    }\n\n    // private\n\n    // Assigns `attributes` to the resource\n\n    // @param [Object] attributes the attributes to assign\n    static __assignAttributes(attributes) {\n      var k, v;\n      for (k in attributes) {\n        v = attributes[k];\n        try {\n          this.association(k).writer(v, false);\n        } catch (error) {\n          this[k] = v;\n        }\n      }\n      return null;\n    }\n\n    // Reads an attribute on the resource\n\n    // @param [String] attribute the attribute to read\n    // @return [Object] the attribute\n    static __readAttribute(attribute) {\n      return this.attributes()[attribute];\n    }\n\n    // Determines whether or not an attribute is a valid attribute on the resource class\n\n    // @note A property is valid to be in `attributes` if it meets these conditions:\n    //   1. It must not be a function\n    //   2. It must not be a reserved keyword\n    //   3. It must not be an association\n\n    // @param [String] attribute the attribute to determine validity for\n    // @param [Number,String,Object] value the value for the attribute, relevant for !strictAttributes mode\n    // @param [Object] options the options to modify valid attributes with\n    static __validAttribute(attribute, value, options) {\n      var e, reserved;\n      reserved = ['__super__', '__associations', '__errors', '__fields', '__links', '__queryParams'];\n      if (this.klass().resourceLibrary.strictAttributes) {\n        if (options.readOnly) {\n          return this.klass().attributes().read.include(attribute);\n        } else if (options.readWrite) {\n          return this.klass().attributes().readWrite.include(attribute);\n        } else {\n          return this.klass().attributes().all.include(attribute);\n        }\n      } else {\n        return !_.isFunction(value) && !_.contains(reserved, attribute) && (function() {\n          try {\n            return this.association(attribute) == null;\n          } catch (error) {\n            e = error;\n            return true;\n          }\n        }).call(this);\n      }\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource callbacks to execute around things like requests and initialization\n  ActiveResource.prototype.Callbacks = class Callbacks {\n    callbacks() {\n      return this.__callbacks || (this.__callbacks = {\n        afterBuild: ActiveResource.prototype.Collection.build(),\n        afterRequest: ActiveResource.prototype.Collection.build()\n      });\n    }\n\n    afterBuild(func) {\n      return this.callbacks()['afterBuild'].push(func);\n    }\n\n    afterRequest(func) {\n      return this.callbacks()['afterRequest'].push(func);\n    }\n\n    // private\n    static __executeCallbacks(type) {\n      return this.klass().callbacks()[type].each((callback) => {\n        return _.bind(callback, this)();\n      });\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource cloning\n  ActiveResource.prototype.Cloning = class Cloning {\n    // Clones the resource and its relationship resources recursively\n    static clone() {\n      return this.__createClone({});\n    }\n\n    // private\n\n    // Clones a resource recursively, taking in a cloner argument to protect against circular cloning\n    //   of relationships\n\n    // @note This will clone:\n    //   1. Resource errors\n    //   2. Resource links\n    //   3. Resource queryParams\n    //   4. Resource attributes\n    //   5. Resource relationships\n    //     a. Relationship links\n    //     b. Relationship loaded status\n    //     c. Relationship resources, according to these principles:\n    //       1. An autosave association is interpreted as part of the identity of a resource. If the resource\n    //          is cloned, the autosave association target is cloned, and vice-versa.\n    //       2. Only clone a related resource if it is part of the identity of the resource being cloned.\n\n    // @option [ActiveResource::Base] cloner the resource cloning this resource (always a related resource)\n    // @option [ActiveResource::Base] newCloner the clone of cloner to reassign fields to\n    // @return [ActiveResource::Base] the cloned resource\n    static __createClone({cloner, newCloner}) {\n      var attributes, clone;\n      clone = this.klass().build();\n      this.errors().each((attribute, e) => {\n        return clone.errors().push(_.clone(e));\n      });\n      clone.__links = _.clone(this.links());\n      clone.__queryParams = _.clone(this.queryParams());\n      attributes = {};\n      attributes[this.klass().primaryKey] = this[this.klass().primaryKey];\n      clone.__assignAttributes(_.extend(attributes, this.attributes()));\n      this.klass().fields().each((f) => {\n        var newAssociation, oldAssociation, ref, ref1, ref2, ref3, reflection, target;\n        clone.__fields[f] = ((ref = this.__fields[f]) != null ? ref.toArray : void 0) != null ? this.__fields[f].clone() : this.__fields[f];\n        try {\n          oldAssociation = this.association(f);\n          newAssociation = clone.association(f);\n          newAssociation.__links = _.clone(oldAssociation.links());\n          if (oldAssociation.loaded()) {\n            newAssociation.loaded(true);\n          }\n          reflection = oldAssociation.reflection;\n          target = reflection.collection() ? reflection.autosave() && oldAssociation.target.include(cloner) ? this.__createCollectionAutosaveAssociationClone(oldAssociation, {\n            parentClone: clone,\n            cloner: cloner,\n            newCloner: newCloner\n          }) : ((ref1 = reflection.inverseOf()) != null ? ref1.autosave() : void 0) ? this.__createCollectionInverseAutosaveAssociationClone(oldAssociation, {\n            parentClone: clone,\n            cloner: cloner\n          }) : oldAssociation.target : reflection.autosave() && oldAssociation.target === cloner ? this.__createSingularAutosaveAssociationClone(oldAssociation, {\n            parentClone: clone,\n            newCloner: newCloner\n          }) : ((ref2 = reflection.inverseOf()) != null ? ref2.autosave() : void 0) && (oldAssociation.target != null) ? this.__createSingularInverseAutosaveAssociationClone(oldAssociation, {\n            parentClone: clone,\n            cloner: cloner\n          }) : (((ref3 = reflection.inverseOf()) != null ? ref3.collection() : void 0) ? this.__replaceSingularInverseCollectionAssociationClone(oldAssociation, {\n            parentClone: clone\n          }) : void 0, oldAssociation.target);\n          return newAssociation.writer(target, false);\n        } catch (error) {\n          return true;\n        }\n      });\n      return clone;\n    }\n\n    // Creates a clone of an autosave collection association on parentClone when cloner of\n    //   parentClone is in the association's target\n\n    // @example\n    //   An order has many orderItems that it autosaves. When an orderItem is cloned, clone the order\n    //   and replace the cloned orderItem in its orderItems collection but skip cloning the other\n    //   orderItems.\n\n    // @note The following changes are made:\n    //   1. Replaces the cloner with the newCloner in the collection on parentClone\n    //   2. Replaces the cloner with the newCloner in the parentClone fields cache so newCloner\n    //        is not registered as a change in the collection\n    //   3. Replaces the inverse belongsTo association on each member of the collection with parentClone\n\n    // @param [Association] association the association that is being cloned\n    // @param [ActiveResource] parentClone the cloned owner that is cloning the association\n    // @param [ActiveResource] cloner the original related resource that initiated parentClone to be cloned\n    // @param [ActiveResource] newCloner the clone of cloner\n    // @return [Collection] the clone of the collection association\n    static __createCollectionAutosaveAssociationClone(association, {parentClone, cloner, newCloner}) {\n      var clone, inverse;\n      clone = association.target.clone();\n      clone.replace(cloner, newCloner);\n      parentClone.__fields[association.reflection.name].replace(cloner, newCloner);\n      if ((inverse = association.reflection.inverseOf()) != null) {\n        clone.each((t) => {\n          if (t.__fields[inverse.name] === this) {\n            t.__fields[inverse.name] = parentClone;\n          }\n          return t.association(inverse.name).writer(parentClone, false);\n        });\n      }\n      return clone;\n    }\n\n    // Clones each item in a collection association on parentClone when the inverse of the association\n    //   is autosaving\n\n    // @example\n    //   A customer has many orders, and each order autosaves the customer so that customer information\n    //   can be updated with each new order. When the order is cloned, clone the customer and since the\n    //   customer is cloned, clone each order that it has but skip cloning the order that initiated\n    //   cloning.\n\n    // @note The following changes are made:\n    //   1. Clones each item in the association\n    //   2. Replaces each item in the parentClone fields cache with the clone of each item\n    //   3. Skips cloning the item that is the cloner of parentClone\n\n    // @param [Association] association the association that is being cloned\n    // @param [ActiveResource] parentClone the cloned owner that is cloning the association\n    // @param [ActiveResource] cloner the original related resource that initiated parentClone to be cloned\n    // @return [Collection] the original collection association\n    static __createCollectionInverseAutosaveAssociationClone(association, {parentClone, cloner}) {\n      return association.target.map((t) => {\n        var clone;\n        if ((cloner != null) && cloner === t) {\n          return cloner;\n        } else {\n          clone = t.__createClone({\n            cloner: this,\n            newCloner: parentClone\n          });\n          parentClone.__fields[association.reflection.name].replace(t, clone);\n          return clone;\n        }\n      });\n    }\n\n    // Clones an autosaving singular association on parentClone when cloner is the association's target\n\n    // @example\n    //   A customer has many orders, and each order autosaves the customer so that customer information\n    //   can be updated with each new order. When the customer is cloned, it will clone its orders,\n    //   and each order should replace the customer on its belongsTo association with the cloned one.\n\n    // @note The following changes are made:\n    //   1. Replaces the association target with newCloner\n    //   2. Replaces the parentClone fields cache with newCloner so newCloner is not registered as a change\n\n    // @param [Association] association the association that is being cloned\n    // @param [ActiveResource] parentClone the cloned owner that is cloning the association\n    // @param [ActiveResource] newCloner the clone of cloner\n    // @return [ActiveResource] the new association target, newCloner\n    static __createSingularAutosaveAssociationClone(association, {parentClone, newCloner}) {\n      parentClone.__fields[association.reflection.name] = newCloner;\n      return newCloner;\n    }\n\n    // Clones a singular association on parentClone when the inverse of the association is autosaving and\n    //   the association has a target that can be cloned\n\n    // @example\n    //   An order has one rating that it autosaves. When the rating is cloned, clone the order it belongs to.\n\n    // @note\n    //   1. If the association target is cloner, no changes are needed\n    //   2. If association target is not cloner, clone the association target and replace parentClone field cache\n    //        with the clone so that the clone is not registered as a change\n\n    // @param [Association] association the association that is being cloned\n    // @param [ActiveResource] parentClone the cloned owner that is cloning the association\n    // @param [ActiveResource] cloner the original related resource that initiated parentClone to be cloned\n    // @return [ActiveResource] the new association target\n    static __createSingularInverseAutosaveAssociationClone(association, {parentClone, cloner}) {\n      var clone;\n      if (association.target === cloner) {\n        return cloner;\n      } else {\n        clone = association.target.__createClone({\n          cloner: this,\n          newCloner: parentClone\n        });\n        if (parentClone.__fields[association.reflection.name] === association.target) {\n          parentClone.__fields[association.reflection.name] = clone;\n        }\n        return clone;\n      }\n    }\n\n    // When parentClone has a belongsTo association that is inverse of a collection association, replace\n    //   the original of parentClone with parentClone in the collection association\n\n    // @example\n    //   An order has many orderItems. When an orderItem is cloned, replace it in the orderItems\n    //   collection of the order that it belongs to.\n\n    // @param [Association] association the association that is being cloned\n    // @param [ActiveResource] parentClone the cloned owner that is cloning the association\n    static __replaceSingularInverseCollectionAssociationClone(association, {parentClone}) {\n      var inverse;\n      inverse = association.reflection.inverseOf();\n      return association.target.association(inverse.name).target.replace(this, parentClone);\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // Wraps a Javascript array with some useful functions native to Ruby Arrays\n  ActiveResource.Collection = ActiveResource.prototype.Collection = (function() {\n    class Collection {\n      // Builds a new ActiveResource::Collection\n\n      // @param [Array,Collection,Value] array the array/value to wrap in a collection\n      // @return [Collection] the built Collection\n      static build(array = []) {\n        if (typeof array.isA === \"function\" ? array.isA(this) : void 0) {\n          return array.clone();\n        } else if (array.length != null) {\n          return new this(array);\n        } else {\n          return new this([array]);\n        }\n      }\n\n      // @param [Array] __collection the collection to wrap with Collection functionality\n      constructor(__collection = []) {\n        this.__collection = __collection;\n      }\n\n      // Returns the size of the collection\n\n      // @return [Integer] the size of the collection\n      size() {\n        return _.size(this.__collection);\n      }\n\n      // Indicates whether or not the collection is empty\n\n      // @return [Boolean] whether or not the collection is empty\n      empty() {\n        return this.size() === 0;\n      }\n\n      // Check whether or not the specified item is in the collection\n\n      // @param [Value] item the item to check for in the collection\n      // @return [Boolean] whether or not the item is in the collection\n      include(item) {\n        return this.indexOf(item) >= 0;\n      }\n\n      // Get the index of the specified item in the collection\n\n      // @param [Value] item the item to get the index for in the collection\n      // @return [Integer] the index of the item in the collection, or -1 if it is not in the collection\n      indexOf(item) {\n        return _.indexOf(this.__collection, item);\n      }\n\n      // Gets the item at the index of the collection\n\n      // @param [Integer] index the index to get\n      // @return [Value] the item at the index\n      get(index) {\n        if (!(index >= this.size())) {\n          return this.__collection[index];\n        }\n      }\n\n      // Sets the index of the collection to the item\n\n      // @param [Integer] index the index to set\n      // @param [Value] item the item to set on the index\n      set(index, item) {\n        if (!(index >= this.size())) {\n          return this.__collection[index] = item;\n        }\n      }\n\n      // Finds original in the collection and if found, replaces it with next\n\n      // @param [Value] original the original item to replace in the collection\n      // @param [Value] next the next value to replace the item\n      // @return [\n      replace(original, next) {\n        var index;\n        if ((index = this.indexOf(original)) > -1) {\n          this.set(index, next);\n        }\n        return next;\n      }\n\n      // @return [Array] all the resources loaded in this collection as an array\n      toArray() {\n        return this.__collection;\n      }\n\n      // @note Alias for toArray()\n      // @return [Array] all the resources loaded in this collection as an array\n      all() {\n        return this.toArray();\n      }\n\n      // Get the first N resources from this association\n\n      // @param n [Integer] the number of resources to return\n      // @return  [Array] array of N resources\n      first(n) {\n        var output;\n        output = _.first(this.__collection, n || 1);\n        if (n) {\n          return output;\n        } else {\n          return output[0];\n        }\n      }\n\n      // Get the last N resources from this association\n\n      // @param n [Integer] the number of resources to return\n      // @return  [Array] array of N resources\n      last(n) {\n        var output;\n        output = _.last(this.__collection, n || 1);\n        if (n) {\n          return output;\n        } else {\n          return output[0];\n        }\n      }\n\n      // Performs an iteratee function on each item of the collection\n\n      // @param [Function] iteratee the function to call with each item of the collection passed in\n      each(iteratee) {\n        return _.each(this.__collection, iteratee);\n      }\n\n      // Injects a persisting object as well as each item of the collection into an iteratee, boiling down\n      // the collection into a single value that is returned\n\n      // @param memo an initial value to pass into the iteratee\n      // @param [Function] iteratee the function to iterate over with the object and items of the collection\n      // @return [Collection] the boiled down value as a result of each iteration of the iteratee\n      inject(memo, iteratee) {\n        return _.reduce(this.__collection, iteratee, memo);\n      }\n\n      // Maps each item of the collection into a new collection using the iteratee\n\n      // @param [Function] iteratee the function to call with each item of the collection passed in\n      // @return [ActiveResource::Collection] a collection mapped based on the iteratee\n      map(iteratee) {\n        return this.constructor.build(_.map(this.__collection, iteratee));\n      }\n\n      // Removes all null values from the array (undefined, null)\n\n      // @return [ActiveResource::Collection] a collection with all null values removed\n      compact(iteratee) {\n        return this.constructor.build(_.without(this.__collection, null, void 0));\n      }\n\n      // Joins each item of the collection as a string, with a separator\n\n      // @param [String] separator the string to separate each item of the collection with\n      // @return [String] the joined collection\n      join(separator = ',') {\n        return s.join(separator, ..._.map(this.__collection, function(i) {\n          return i.toString();\n        }));\n      }\n\n      // Flattens a deep nested array into a shallow array\n\n      // @return [Collection] the shallow collection\n      flatten() {\n        return this.constructor.build(_.flatten(this.__collection));\n      }\n\n      // Push items onto the end of this collection\n\n      // @param [Array] items a list of items to push onto the collection\n      push(...items) {\n        return this.__collection.push(...items);\n      }\n\n      // Unshifts items onto the beginning of this collection\n\n      // @param [Array] items a list of items to unshift onto the collection\n      unshift(...items) {\n        return this.__collection.unshift(...items);\n      }\n\n      // Pops items off the end of this collection\n\n      // @return [Item] the last item popped off the collection\n      pop() {\n        return this.__collection.pop();\n      }\n\n      // Shifts items off the beginning of this collection\n\n      // @return [Item] the first item shifted off the collection\n      shift() {\n        return this.__collection.shift();\n      }\n\n      // Deletes an item from the collection and returns it\n\n      // @param [Array<Value>] items the items to delete from the collection\n      // @return [Array] an array of items deleted from the collection\n      delete(...items) {\n        var deleted;\n        deleted = _.intersection(this.__collection, items);\n        this.__collection = _.without(this.__collection, ...items);\n        return deleted;\n      }\n\n      // Clear the collection (does not delete on server)\n      clear() {\n        return this.__collection = [];\n      }\n\n      // Looks through each item in the collection, returning an array of all items that pass the\n      // truth test (predicate)\n\n      // @param predicate [Function] the function to evaluate each item in the collection with\n      // @return [ActiveResource::Collection] a collection with only item that return true in the predicate\n      select(predicate) {\n        return this.constructor.build(_.filter(this.__collection, predicate));\n      }\n\n      // Get the first item that returns true from the predicate\n\n      // @param [Function] predicate the function to evaluate each resource in the collection with\n      // @return [Value] the first resource that returned true in the predicate\n      detect(predicate) {\n        return _.detect(this.__collection, predicate);\n      }\n\n      // Duplicates the items of the collection into a new collection\n\n      // @return [Collection] the cloned collection of original items\n      clone() {\n        return this.constructor.build(_.map(this.__collection, (i) => {\n          return i;\n        }));\n      }\n\n    };\n\n    ActiveResource.include(Collection, ActiveResource.prototype.Typing);\n\n    return Collection;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Wraps an ActiveResource::Collection with some useful functions specific to GET responses\n  ActiveResource.CollectionResponse = ActiveResource.prototype.CollectionResponse = class CollectionResponse extends ActiveResource.prototype.Collection {\n    // Builds a new ActiveResource::CollectionResponse\n\n    // @param [Array,Collection,Object] array the array/object to wrap in a collection\n    // @return [CollectionResponse] the built CollectionResponse\n    static build(array = []) {\n      if (typeof array.isA === \"function\" ? array.isA(ActiveResource.prototype.Collection) : void 0) {\n        return new this(array.toArray());\n      } else {\n        return super.build(array);\n      }\n    }\n\n    // Retrieves and sets the links that were sent at the top level in the response\n\n    // @param [Object] data the link data to set this CollectionResponse's links to\n    // @return [Object] the link data for the response\n    links(data = {}) {\n      if (!_.isEmpty(data) || (this.__links == null)) {\n        this.__links = data;\n      }\n      return this.__links;\n    }\n\n    // Indicates whether or not a prev link was included in the response\n\n    // @return [Boolean] whether or not the response has a previous page that can be loaded\n    hasPrevPage() {\n      return this.links()['prev'] != null;\n    }\n\n    // Indicates whether or not a next link was included in the response\n\n    // @return [Boolean] whether or not the response has a next page that can be loaded\n    hasNextPage() {\n      return this.links()['next'] != null;\n    }\n\n    // Loads data at links()['prev'] if there is a link\n\n    // @return [Promise] a promise to return the previous page of data, or errors\n    prevPage() {\n      if (this.hasPrevPage()) {\n        return this.first().klass().resourceLibrary.interface.get(this.links()['prev']);\n      }\n    }\n\n    // Loads data at links()['next'] if there is a link\n\n    // @return [Promise] a promise to return the next page of data, or errors\n    nextPage() {\n      if (this.hasNextPage()) {\n        return this.first().klass().resourceLibrary.interface.get(this.links()['next']);\n      }\n    }\n\n    // Converts this a plain ActiveResource::Collection\n\n    // @return [Collection] the converted collection for this CollectionResponse\n    toCollection() {\n      return ActiveResource.prototype.Collection.build(this.toArray());\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // A class for managing errors associated with persisting an ActiveResource\n  // Also adds instance methods to ActiveResource::Base to manage the class itself\n\n  // @example\n  //   product = Product{ title: '' }\n  //   product.save ->\n  //     unless product.valid?()\n  //       product.errors()\n\n  ActiveResource.Errors = ActiveResource.prototype.Errors = class Errors {\n    // Caches an instance of this class on ActiveResource::Base#errors in order to manage\n    // that resource's errors\n\n    // @return [ActiveResource::Errors] the errors class for the resource\n    static errors() {\n      return this.__errors || (this.__errors = new ActiveResource.prototype.Errors(this));\n    }\n\n    // Indicates whether or not the resource is valid?\n\n    // @note A resource is valid if it does not have any errors\n\n    // @return [Boolean] whether or not the resource is valid\n    static valid() {\n      return this.errors().empty();\n    }\n\n    // Instantiates with a @base resource and @__errors storage object\n\n    // @param [ActiveResource::Base] the resource that these errors apply to\n    constructor(base) {\n      this.base = base;\n      this.reset();\n    }\n\n    reset() {\n      return this.__errors = {};\n    }\n\n    clear() {\n      return this.reset();\n    }\n\n    // Adds an error with code and message to the error object for an field\n\n    // @param [String] field the field the error applies to\n    //   Or 'base' if it applies to the base object\n    // @param [String] code the code for the error\n    // @param [String] detail the message for the error\n    // @return [Object] the error object created and added to storage\n    add(field, code, detail = '') {\n      return this.__add(field, code, detail);\n    }\n\n    // Adds an array of errors\n\n    // @see #add for individual error params\n\n    // @param [Array<Array>] errors error objects to add\n    addAll(...errors) {\n      return _.map(errors, (error) => {\n        return this.__add(...error);\n      });\n    }\n\n    // Propagates errors with nested fields down through relationships to their appropriate resources\n\n    // @param [ActiveResource.Collection<Object>] errors the errors to propagate down the resource\n    propagate(errors) {\n      return errors.each((error) => {\n        var association, field, nestedError, nestedErrors, nestedField, ref, ref1;\n        nestedField = error.field.split('.');\n        field = nestedField.shift();\n        try {\n          association = this.base.association(field);\n          nestedError = _.clone(error);\n          nestedError.field = nestedField.length === 0 && 'base' || nestedField.join('.');\n          nestedErrors = ActiveResource.Collection.build([nestedError]);\n          if (association.reflection.collection()) {\n            return (ref = association.target.first()) != null ? ref.errors().propagate(nestedErrors) : void 0;\n          } else {\n            return (ref1 = association.target) != null ? ref1.errors().propagate(nestedErrors) : void 0;\n          }\n        } catch (error1) {\n          return this.push(error);\n        }\n      });\n    }\n\n    // Adds an existing error with field to this errors object\n\n    // @param [Object] error the error to push onto this errors object\n    // @return [Object] the error object\n    push(error) {\n      var base, name;\n      (base = this.__errors)[name = error.field] || (base[name] = []);\n      this.__errors[error.field].push(error);\n      return error;\n    }\n\n    // Indicates whether or not the error with code `code` is on the `field`\n\n    // @param [String] field the field to check if the error exists on\n    // @param [String] code the code to check for on the field\n    // @return [Boolean] whether or not the error with code is on the field\n    added(field, code) {\n      return ActiveResource.prototype.Collection.build(this.__errors[field]).detect(function(e) {\n        return e.code === code;\n      }) != null;\n    }\n\n    // Indicates whether or not there are errors for a specific field\n\n    // @param [String] field the field to see if there are errors for\n    // @return [Boolean] whether or not the field has errors\n    include(field) {\n      return (this.__errors[field] != null) && _.size(this.__errors[field]) > 0;\n    }\n\n    // Indicates whether or not the errors object is empty\n\n    // @return [Boolean] whether or not the errors object is empty\n    empty() {\n      return this.size() === 0;\n    }\n\n    // Indicates the size of the errors array\n\n    // @return [Integer] the number of errors\n    size() {\n      return _.size(this.toArray());\n    }\n\n    // Delete the errors for a specific field\n\n    // @param [String] field the field to delete errors for\n    delete(field) {\n      return this.__errors[field] = [];\n    }\n\n    // Iterates over each error key, value pair in the errors object\n    // using a provided iterator that takes in two arguments (field, error)\n\n    // @example\n    //   resource.errors().each (field, error) ->\n    //     # Will yield 'name' and { code: '...', message: '...' }\n    //     # Then, will yield 'name' and { code: '...', message: '...' }\n\n    // @param [Function] iterator the function to use to iterate over errors\n    each(iterator) {\n      return _.each(this.__errors, function(errors, field) {\n        var error, i, len, results;\n        results = [];\n        for (i = 0, len = errors.length; i < len; i++) {\n          error = errors[i];\n          results.push(iterator(field, error));\n        }\n        return results;\n      });\n    }\n\n    // Returns the error object for an field\n\n    // @param [String] field the name of field to get errors for\n    // @return [Object] the error object for the field\n    forField(field) {\n      return ActiveResource.prototype.Collection.build(_.keys(this.__errors)).select((k) => {\n        return s.startsWith(k, field);\n      }).map((k) => {\n        return this.__errors[k];\n      }).flatten();\n    }\n\n    // Returns the error object for an field\n\n    // @param [String] field the field to get errors for\n    // @return [Object] the error object for the field\n    detailsForField(field) {\n      return this.forField(field).inject({}, function(out, error) {\n        out[error.code] = error.detail;\n        return out;\n      });\n    }\n\n    // Returns the error object for base\n\n    // @return [Object] the error object for base\n    forBase() {\n      return this.forField('base');\n    }\n\n    // Converts the errors object to an array of errors\n\n    // @return [Array] the errors object converted to an array of errors\n    toArray() {\n      var errors, field, output, ref;\n      output = [];\n      ref = this.__errors;\n      for (field in ref) {\n        errors = ref[field];\n        output.push(...errors);\n      }\n      return output;\n    }\n\n    // Convert the errors object to a collection of errors\n\n    // @return [Collection] the errors object converted to a collection of errors\n    toCollection() {\n      return ActiveResource.prototype.Collection.build(this.toArray());\n    }\n\n    // private\n\n    // Adds an error with code and message to the error object for an field\n\n    // @param [String] field the field the error applies to\n    //   Or 'base' if it applies to the base object\n    // @param [String] code the code for the error\n    // @param [String] detail the message for the error\n    // @return [Object] the error object created and added to storage\n    __add(field, code, detail = '') {\n      var base, error;\n      (base = this.__errors)[field] || (base[field] = []);\n      this.__errors[field].push(error = this.__buildError(field, code, detail));\n      return error;\n    }\n\n    // @param [String] field the field the error applies to\n    //   Or 'base' if it applies to the base object\n    // @param [String] code the code for the error\n    // @param [String] detail the message for the error\n    // @return [Object] a mapped object that represents an error\n    __buildError(field, code, detail) {\n      return {\n        field: field,\n        code: code,\n        detail: detail,\n        message: detail\n      };\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing changes in tracked fields\n  ActiveResource.prototype.Fields = class Fields {\n    // Returns all of the fields of the klass (attributes + relationships)\n    // @return [Collection<String>] the names of all the fields of the klass\n    fields() {\n      var attributes, output;\n      attributes = this.attributes();\n      output = ActiveResource.prototype.Collection.build(attributes.all);\n      output.push(...attributes.read.toArray());\n      output.push(..._.keys(this.reflections()));\n      return output;\n    }\n\n    // Called in Base constructor to initialize tracking for each field by creating the `__field` object and storing\n    //   either blank Collection or null for each field\n    static __initializeFields() {\n      this.__fields = {};\n      return this.klass().fields().each((field) => {\n        var ref;\n        if ((ref = this.klass().reflectOnAssociation(field)) != null ? ref.collection() : void 0) {\n          return this.__fields[field] = ActiveResource.prototype.Collection.build();\n        } else {\n          return this.__fields[field] = null;\n        }\n      });\n    }\n\n    // Called after requests, used to assign the values for fields according to the server's response and\n    //   update the control for field tracking\n\n    // @note Each time `changedFields()` is run, the current value of each field is compared against the fields last assigned\n    //   using this method.\n\n    // @param [Object] fields the fields to assign and use as the control for field change tracking\n    static __assignFields(fields) {\n      _.each(fields, (v, k) => {\n        if (!_.has(this.__fields, k)) {\n          return;\n        }\n        try {\n          if (this.association(k).reflection.collection()) {\n            return this.__fields[k] = ActiveResource.prototype.Collection.build(v);\n          } else {\n            return this.__fields[k] = v;\n          }\n        } catch (error) {\n          return this.__fields[k] = v;\n        }\n      });\n      return this.__assignAttributes(fields);\n    }\n\n    // If true, at least one field on the resource has changed\n    // @return [Boolean] whether or not the resource has changed\n    static changed() {\n      return !this.changedFields().empty();\n    }\n\n    // Returns all of the fields that have been changed since the last server response\n    // @return [Collection<String>] the changed fields for the resource\n    static changedFields() {\n      return this.klass().fields().select((field) => {\n        var association, newField, newTargets, oldField;\n        oldField = this.__fields[field];\n        newField = this[field];\n        try {\n          // Relationship field if association found\n          association = this.association(field);\n          newField = this[field]();\n          if (association.reflection.collection()) {\n            if (oldField.size() !== newField.size()) {\n              return true;\n            }\n            newTargets = newField.target().select((t) => {\n              return !oldField.include(t) || (association.reflection.autosave() && t.changed());\n            });\n            return !newTargets.empty();\n          } else {\n            return oldField != newField || association.reflection.autosave() && newField.changed();\n          }\n        } catch (error) {\n          // Attribute field if association not found\n          // Check that they are not equal, and that its not a case of undefined !== null\n          return oldField != newField && !_.isUndefined(newField);\n        }\n      });\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing links of resources to their servers\n  ActiveResource.Links = ActiveResource.prototype.Links = class Links {\n    // Links to query the server for this persisted resource with\n    links() {\n      return this.__links || (this.__links = _.clone(this.klass().links()));\n    }\n\n    // @note Static method\n    // Links to query the server for this model with\n\n    // @return [Object] the URL links used to query this resource type\n    static links() {\n      if (this.resourceLibrary.baseUrl == null) {\n        throw 'baseUrl is not set';\n      }\n      if (this.queryName == null) {\n        throw 'queryName is not set';\n      }\n      return this.__links || (this.__links = {\n        related: this.resourceLibrary.baseUrl + this.queryName + '/'\n      });\n    }\n\n    // @note Static method\n    // Constructs formatted links\n\n    // @param [Array<String>] args the segments of a URL to join\n    // @return [String] joined segments of URL together with /\n    static __constructLink(...args) {\n      return _.map(args, function(str) {\n        if (s.endsWith(str, '/')) {\n          return str;\n        } else {\n          return str + '/';\n        }\n      }).join('');\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for persisting local resources with the server\n  ActiveResource.prototype.Persistence = class Persistence {\n    // Whether or not this resource is persisted on the server\n\n    // @note If the resource has a `self` link, that means it has a link to itself on the server,\n    //   thus, it is persisted. Before a resource has a `self` link, it will have a `related` link\n    //   that belongs to its @klass()\n\n    // @example\n    //   @klass().links() == { related: '/api/v1/orders' }\n    //   @links() == { self: '/api/v1/orders/1' }\n    //   return true\n\n    // @example\n    //   @klass().links() == { related: '/api/v1/orders' }\n    //   @links() == { related: '/api/v1/orders' }\n    //   return false\n\n    // @return [Boolean] whether or not the resource is persisted on the server\n    static persisted() {\n      return this.links()['self'] != null;\n    }\n\n    // Whether or not this resource is a new resource\n    // @note Is the opposite of persisted()\n\n    // @return [Boolean] whether or not the resource is a new resource\n    static newResource() {\n      return !this.persisted();\n    }\n\n    // Save any changes to the resource, and inserts the resource into callback after\n\n    // @note\n    //   If !resource.persisted(), then create it\n    //   If resource.persisted(), then update it\n\n    // @note\n    //   Callback will be called regardless if the resource is successfully saved\n    //   This is useful because ActiveResource builds regardless if it is valid or not,\n    //   and one can read the errors on a resource in the same function as success\n\n    // @example\n    //   Order.build(...).save (savedresource) ->\n    //     if savedresource.valid()\n    //       ...\n    //     else\n    //       savedresource.errors.each (e) ->\n    //         ...\n\n    // @example\n    //   resource.save ->\n    //     if resource.valid()\n    //       ...\n    //     else\n    //       resource.errors()\n\n    // @param [Function] callback the callback to pass the ActiveResource into\n    // @return [Promise] a promise to return the ActiveResource, valid or invalid\n    static save(callback) {\n      return this.__createOrUpdate().then(callback, callback);\n    }\n\n    // Update specific attributes of the resource, save it, and insert resource into callback after\n\n    // @note\n    //   If !resource.persisted(), then create it\n    //   If resource.persisted(), then update it\n\n    // @note\n    //   Callback will be called regardless if the resource is successfully saved\n    //   This is useful because ActiveResource builds regardless if it is valid or not,\n    //   and one can read the errors on a resource in the same function as success\n\n    // @example\n    //   resource.update { title: '...', price: '...' }, ->\n    //     if resource.valid()\n    //       ...\n    //     else\n    //       resource.errors()\n\n    // @param [Object] attributes the attributes to update in the resource\n    // @param [Function] callback the callback to pass the ActiveResource into\n    // @return [Promise] a promise to return the ActiveResource, valid or invalid\n    static update(attributes, callback) {\n      var attributesKeys, oldAttributes;\n      attributesKeys = ActiveResource.prototype.Collection.build(_.keys(attributes));\n      oldAttributes = _.pick(this.attributes(), attributesKeys.toArray());\n      oldAttributes = _.defaults(oldAttributes, attributesKeys.inject({}, (obj, k) => {\n        obj[k] = null;\n        return obj;\n      }));\n      this.__assignAttributes(attributes);\n      return this.__createOrUpdate().then(null, function(resource) {\n        resource.__assignAttributes(oldAttributes);\n        return resource;\n      }).then(callback, callback);\n    }\n\n    // Deletes the resource from the server, assuming callbacks pass\n    // TODO: Remove the resource from all associations as well\n\n    // @example\n    // Order.last().then (order) ->\n    //   order.destroy()\n    //   .then (destroyedresource) ->\n    //     ...\n    //   .catch ->\n    //     ...\n    static destroy() {\n      var resource;\n      return this.klass().resourceLibrary.interface.delete(this.links()['self'], (resource = this)).then(function() {\n        resource.__links = {};\n        return resource;\n      });\n    }\n\n    // private\n\n    // Called by `save` and `update` to determine if we should create a new resource with attributes\n    // on the server, or simply update a persisted resource with the attributes\n\n    // @note This uses the `related` link of the resource (example: `/api/v1/orders`) if it is not persisted,\n    //   since that is the create endpoint. If the resource is persisted, it uses the `self` link of the resource,\n    //   which would be `/api/v1/orders/:id`, so we can make changes to the persisted resource\n\n    // @note This uses `PUT` for update instead of `PATCH` because until we implement dirty attributes\n    //   we have to send the entire resource to the server, warranting use of the `PUT` verb\n\n    // @return [Promise] a promise to return the persisted ActiveResource **or** ActiveResource with errors\n    static __createOrUpdate() {\n      this.errors().reset();\n      if (this.persisted()) {\n        return this.klass().resourceLibrary.interface.patch(this.links()['self'], this);\n      } else {\n        return this.klass().resourceLibrary.interface.post(this.links()['related'], this);\n      }\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.QueryParams = (function() {\n    var COLLECTION_RELATED, RESOURCE_RELATED;\n\n    class QueryParams {\n      // Gets a queryParams object for `this`\n\n      // If `this` is an instance of a class, instantiate its queryParams with that of its classes,\n      // which will have built-in queryParams from autosave associations and `fields` declarations\n\n      // TODO: Add autosave associations to default klass().queryParams (returns {} right now)\n      // @return [Object] the queryParams for `this`\n      static queryParams() {\n        return this.__queryParams || (this.__queryParams = (typeof this.isA === \"function\" ? this.isA(ActiveResource.prototype.Base) : void 0) ? _.clone(this.klass().queryParams()) : {});\n      }\n\n      // Gets the queryParams for a given reflection of a resource's class\n\n      // @note This is used by associations when doing any queries (reload, etc) to get the\n      //   includes/fields that the association was initially created with in their owner's call,\n      //   thus maintaining their fields/includes instead of getting all fields & no includes:\n\n      // @example\n      //   Product.includes(orders: 'customer').select('title', orders: ['price']).first()\n      //   .then (resource) ->\n      //     resource.queryParamsForReflection(resource.klass().reflectOnAssociation('orders'))\n      //     => { includes: ['customer'], fields: { orders: ['price'] } }\n\n      // @param [Reflection] reflection the reflection to get queryParams for\n      // @return [Object] the queryParams for the reflections\n      static queryParamsForReflection(reflection) {\n        var includes, queryParams, ref;\n        queryParams = {};\n        if (this.queryParams()['include'] != null) {\n          includes = ActiveResource.prototype.Collection.build(this.queryParams()['include']).inject([], function(out, i) {\n            if (_.isObject(i)) {\n              _.each(_.keys(i), function(i2) {\n                if (i2 === reflection.name) {\n                  return out.push(..._.flatten([i[i2]]));\n                }\n              });\n            }\n            return out;\n          });\n          if (includes.length !== 0) {\n            queryParams['include'] = includes;\n          }\n        }\n        if (!(typeof reflection.polymorphic === \"function\" ? reflection.polymorphic() : void 0) && (((ref = this.queryParams()['fields']) != null ? ref[reflection.klass().queryName] : void 0) != null)) {\n          queryParams['fields'] = _.pick(this.queryParams()['fields'], reflection.klass().queryName);\n        }\n        return queryParams;\n      }\n\n      static assignQueryParams(queryParams) {\n        return this.__queryParams = queryParams;\n      }\n\n      // Used to assign only resource related queryParams like `fields` and `include` to an object\n\n      // @param [Object] queryParams the queryParams to pick resource related params out of and assign\n      //   to `this`\n      static assignResourceRelatedQueryParams(queryParams) {\n        return this.assignQueryParams(_.pick(queryParams, ...RESOURCE_RELATED));\n      }\n\n      static resetQueryParams() {\n        return this.__queryParams = {};\n      }\n\n      static __resourceRelatedParams() {\n        return _.pick(this.queryParams(), ...RESOURCE_RELATED);\n      }\n\n      static __collectionRelatedParams() {\n        return _.pick(this.queryParams(), ...COLLECTION_RELATED);\n      }\n\n      // Extends a value param of queryParams with the new value passed in\n\n      // @example\n      //   @__queryParams = { limit: 2 }\n      //   param = 'limit'\n      //   value = 5\n\n      //   return { limit: 5 }\n\n      // @note queryParams defaults to @__queryParams, but this function can be used\n      //   to modify any object\n\n      // @param [String] param the name of the param to extend\n      // @param [Object] value the value to replace on the param\n      // @param [Object] queryParams the object to modify instead of @__queryParams\n      // @return [Object] the extended queryParams\n      static __extendValueParam(param, value, queryParams) {\n        queryParams || (queryParams = _.clone(this.queryParams()));\n        queryParams[param] = value;\n        return queryParams;\n      }\n\n      // Extends an object param of queryParams with the options passed in\n\n      // @example\n      //   @__queryParams = { fields: { order: '...' } }\n      //   param = 'fields'\n      //   options = { transactions: 'id,amount' }\n\n      //   return { fields: { order: '...', transactions: 'id,amount' } }\n\n      // @note queryParams defaults to @__queryParams, but this function can be used\n      //   to modify any object\n\n      // @param [String] param the name of the param to extend\n      // @param [Object] options the options to add to the param\n      // @param [Object] queryParams the object to modify instead of @__queryParams\n      // @return [Object] the extended queryParams\n      static __extendObjectParam(param, options, queryParams) {\n        queryParams || (queryParams = _.clone(this.queryParams()));\n        queryParams[param] = _.extend(queryParams[param] || {}, options);\n        return queryParams;\n      }\n\n      // Push items onto an array param of queryParams\n\n      // @example\n      //   @__queryParams = { sort: ['id'] }\n      //   param = 'sort'\n      //   value = 'updatedAt'\n\n      //   return { sort: ['id', 'updatedAt'] }\n\n      // @note queryParams defaults to @__queryParams, but this function can be used\n      //   to modify any object\n\n      // @param [String] param the name of the param to extend\n      // @param [Array<String,Object>] items items to push onto the collection param\n      // @param [Object] queryParams the object to modify instead of @__queryParams\n      // @return [Object] the extended queryParams\n      static __extendArrayParam(param, items, queryParams) {\n        queryParams || (queryParams = _.clone(this.queryParams())); // shallow clone\n        queryParams[param] = queryParams[param] ? queryParams[param].slice(0) : []; // clone array\n        if (items != null) {\n          queryParams[param].push(...items);\n        }\n        return queryParams;\n      }\n\n    };\n\n    // private\n    RESOURCE_RELATED = ['fields', 'include'];\n\n    COLLECTION_RELATED = ['filter', 'sort', 'page'];\n\n    return QueryParams;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Adds methods for managing reflections, which reflect on associations of ActiveResources\n  ActiveResource.Reflection = ActiveResource.prototype.Reflection = (function() {\n    class Reflection {\n      // Returns an object with the name of the reflection as the key and a Reflection as the value\n\n      // @example\n      //   Order.reflections() == { transactions: HasManyReflection }\n\n      // @return [Object] the name/reflection pair object for all reflections of the ActiveResource\n      reflections() {\n        return this.__reflections || (this.__reflections = {});\n      }\n\n      // Returns all reflections of associations of the ActiveResource class\n\n      // @param [String] macro filters reflections by their macro\n      // @return [Collection] a collection of reflections of all associations\n      reflectOnAllAssociations(macro = null) {\n        var reflections;\n        reflections = ActiveResource.prototype.Collection.build(_.values(this.__reflections));\n        if (macro) {\n          reflections = reflections.select(function(r) {\n            return r.macro === macro;\n          });\n        }\n        return reflections;\n      }\n\n      // @return [Reflection] the reflection of a specific association\n      reflectOnAssociation(association) {\n        return this.reflections()[association];\n      }\n\n      // Returns all reflections of autosaving associations of the ActiveResource class\n\n      // @return [Collection] a collection of reflections of all autosaving associations\n      reflectOnAllAutosaveAssociations() {\n        var reflections;\n        reflections = ActiveResource.prototype.Collection.build(_.values(this.__reflections));\n        return reflections.select(function(r) {\n          return typeof r.autosave === \"function\" ? r.autosave() : void 0;\n        });\n      }\n\n      // Creates a reflection of an association\n\n      // @param [String] macro the macro type for the reflection (hasMany, hasOne, belongsTo)\n      // @param [String] name the name of the association to reflect on\n      // @param [Object] options the options to build into the reflection\n      // @param [Class] activeResource the ActiveResource class that owns this reflection\n      // @return [Reflection] the built reflection of an association\n      static create(macro, name, options, activeResource) {\n        var klass;\n        klass = (function() {\n          switch (macro) {\n            case 'hasMany':\n              return Reflection.prototype.HasManyReflection;\n            case 'hasOne':\n              return Reflection.prototype.HasOneReflection;\n            case 'belongsTo':\n              return Reflection.prototype.BelongsToReflection;\n          }\n        })();\n        return new klass(name, options, activeResource);\n      }\n\n      // Adds a reflection to the ActiveResource's class\n\n      // @param [Class] ar the ActiveResource class to add the reflection to\n      // @param [String] name the name of the reflection\n      // @param [Reflection] reflection the reflection to add to the class\n      static addReflection(ar, name, reflection) {\n        var r;\n        r = {};\n        r[name] = reflection;\n        return ar.__reflections = _.extend(ar.__reflections || {}, r);\n      }\n\n    };\n\n    Reflection.prototype.AbstractReflection = (function() {\n      var INVALID_AUTOMATIC_INVERSE_OPTIONS, VALID_AUTOMATIC_INVERSE_MACROS, automaticInverseOf, canFindInverseOfAutomatically, validInverseReflection;\n\n      // Reflects on associations between ActiveResources. This is stored at the class level,\n      // and when an ActiveResource is instantiated the reflection is built into an appropriate\n      // Association\n      class AbstractReflection {\n        // @param [String] name the name of the association to reflect on\n        // @param [Object] options the options to build into the reflection\n        // @param [Class] activeResource the ActiveResource class that owns this reflection\n        constructor(name1, options1, activeResource1) {\n          this.name = name1;\n          this.options = options1;\n          this.activeResource = activeResource1;\n          if (this.autosave()) {\n            this.activeResource.assignQueryParams(this.activeResource.__extendArrayParam('include', [this.name]));\n          }\n        }\n\n        // Returns the target klass that this reflection reflects on\n        // @note Will throw error if called on polymorphic reflection\n\n        // @return [Class] The klass that this reflection reflects on\n        klass() {\n          return this.activeResource.resourceLibrary.constantize(this.className());\n        }\n\n        type() {\n          return this.__type || (this.__type = this.options['as'] && (this.options['foreignType'] || `${this.options['as']}Type`));\n        }\n\n        // @return [String] the className of the klass this reflection reflects on\n        className() {\n          return this.__className || (this.__className = this.options['className'] || this.__deriveClassName());\n        }\n\n        // @return [String] the foreignKey of the reflection\n        foreignKey() {\n          return this.__foreignKey || (this.__foreignKey = this.options['foreignKey'] || this.__deriveForeignKey());\n        }\n\n        // @return [String] the foreignType of the reflection\n        foreignType() {\n          return this.__foreignType || (this.__foreignType = this.options['foreignType'] || `${this.name}Type`);\n        }\n\n        // @param [Class] the class to get the primary key of\n        // @return [String] the primary key for the associated klass this reflects on\n        associationPrimaryKey(klass) {\n          return this.options['primaryKey'] || this.__primaryKey(klass || this.klass());\n        }\n\n        // @return [String] the primaryKey for the owner ActiveResource of the reflection\n        activeResourcePrimaryKey() {\n          return this.__activeResourcePrimaryKey || (this.__activeResourcePrimaryKey = this.options['primaryKey'] || this.__primaryKey(this.activeResource));\n        }\n\n        // @return [Boolean] whether or not this reflection is for a collection of resources\n        collection() {\n          return false;\n        }\n\n        // @return [Boolean] whether or not this reflection is the hasOne side of a singular reflection\n        hasOne() {\n          return false;\n        }\n\n        // @return [Boolean] whether or not this reflection is the belongsTo side of a singular reflection\n        belongsTo() {\n          return false;\n        }\n\n        // @return [Boolean] whether or not the association can be constructed via a build/create method\n        constructable() {\n          return true;\n        }\n\n        // @return [Boolean] whether or not the association is polymorphic\n        polymorphic() {\n          return this.options['polymorphic'] || false;\n        }\n\n        // @return [Boolean] whether or not this is an autosave association\n        autosave() {\n          return this.options['autosave'] || false;\n        }\n\n        buildAssociation() {\n          return this.klass().build();\n        }\n\n        // Whether or not the reflection has an inverse\n        hasInverse() {\n          return this.__inverseName() != null;\n        }\n\n        // The inverseOf this reflection on the target klass\n        // @example\n        //   Product.hasMany('orders')\n        //   Order.belongsTo('product')\n\n        //   Product.reflectOnAssociation('orders').inverseOf()\n        //     # => Order.reflectOnAssociation('product')\n\n        // @return [Reflection] the inverseOf this reflection\n        inverseOf() {\n          if (!this.hasInverse()) {\n            return;\n          }\n          return this.__inverseOf || (this.__inverseOf = this.klass().reflectOnAssociation(this.__inverseName()));\n        }\n\n        // Finds the inverseOf a polymorphic reflection, given a class to search the reflections of\n\n        // @note The child side of the relationship must define @options['inverseOf'] in order for\n        //   this to work\n\n        // @example\n        //   Order.hasMany('comments', as: 'resource')\n        //   Comment.belongsTo('resource', polymorphic: true, inverseOf: 'comments')\n\n        //   Comment.reflectOnAssociation('resource').polymorphicInverseOf(Order)\n        //   # => Order.reflectOnAssociation('comments')\n\n        // @param [Class] associatedClass the class to check for the inverseOf reflection on\n        // @return [Reflection] the inverseOf this polymorphic reflection\n        polymorphicInverseOf(associatedClass) {\n          var inverseRelationship;\n          if (this.hasInverse()) {\n            if ((inverseRelationship = associatedClass.reflectOnAssociation(this.options['inverseOf']))) {\n              return inverseRelationship;\n            }\n          }\n        }\n\n        // private\n\n        // Derives the class name of the reflection from its name\n        // @return [String] the class name of the reflection\n        __deriveClassName() {\n          return s.classify(_.singularize(this.name));\n        }\n\n        // Derives the foreign key of the reflection based on its type\n        // @return [String] the foreign key of the reflection\n        __deriveForeignKey() {\n          if (this.belongsTo()) {\n            return `${this.name}Id`;\n          } else if (this.options['as']) {\n            return `${this.options['as']}Id`;\n          } else {\n            return `${s.camelize(this.activeResource.className, true)}Id`;\n          }\n        }\n\n        // Determines the primaryKey of a given class\n        // @note Throws an error if the primaryKey could not be determined\n\n        // @param [Class] klass the klass to determine the primaryKey of\n        // @return [String] the primaryKey of the class\n        __primaryKey(klass) {\n          return klass.primaryKey || (function() {\n            throw `Unknown primary key for ${klass.className}`;\n          })();\n        }\n\n        // The name of the inverseOf this reflection\n        // @example\n        //   Product.has_many('orders')\n        //   Product.reflectOnAssociation('orders').inverseName() # => 'product'\n\n        // @return [String] the name of the inverseOf this reflection\n        __inverseName() {\n          return this.options['inverseOf'] || (this.__automaticInverseOf === false ? null : this.__automaticInverseOf || (this.__automaticInverseOf = automaticInverseOf(this)));\n        }\n\n      };\n\n      ActiveResource.include(AbstractReflection, ActiveResource.prototype.Typing);\n\n      AbstractReflection.__excludeFromExtend = true;\n\n      // Finds the inverseOf the reflection automatically, either because an inverseOf option\n      // was specified or through using the name of the ActiveResource to find this reflection\n      // on the target klass\n\n      // @note A belongsTo reflection will not have an automaticInverseOf if it belongsTo a\n      //   one-to-many reflection\n\n      // @param [Reflection] the reflection to find the automaticInverseOf\n      // @return [Reflection,Boolean] the automaticInverseOf reflection for this reflection\n      automaticInverseOf = function(reflection) {\n        var e, inverseName, inverseReflection;\n        if (canFindInverseOfAutomatically(reflection)) {\n          inverseName = s.camelize(reflection.options['as'] || reflection.activeResource.className, true);\n          try {\n            inverseReflection = reflection.klass().reflectOnAssociation(inverseName);\n          } catch (error) {\n            e = error;\n            inverseReflection = false;\n          }\n          if (validInverseReflection(reflection, inverseReflection)) {\n            return inverseName;\n          }\n        }\n        return false;\n      };\n\n      VALID_AUTOMATIC_INVERSE_MACROS = ['hasMany', 'hasOne', 'belongsTo'];\n\n      INVALID_AUTOMATIC_INVERSE_OPTIONS = ['polymorphic'];\n\n      // Check that reflection does not have any options that prevent us from being\n      // able to guess its inverse automatically.\n\n      // @note\n      //   1. The 'inverseOf' option cannot be false\n      //   2. The reflection macro must be in the list of valid automatic inverse macros\n      //   3. The reflection must not have any options like 'polymorphic' that prevent us\n      //      from correctly guessing the inverse\n\n      // @param [Reflection] reflection the reflection to check if we can find the inverseOf automatically\n      // @return [Boolean] whether or not we can find the inverseOf automatically\n      canFindInverseOfAutomatically = function(reflection) {\n        return reflection.options['inverseOf'] !== false && _.include(VALID_AUTOMATIC_INVERSE_MACROS, reflection.macro) && _.isEmpty(_.pick(reflection.options, ...INVALID_AUTOMATIC_INVERSE_OPTIONS));\n      };\n\n      // Checks if inverse reflection that is returned from `automaticInverseOf` method is a\n      // valid reflection. We must make sure that the reflections ActiveResource className matches\n      // up with the current reflections klass className\n\n      // @note klass() will always be valid because when theres an error from calling `klass()`,\n      //   `reflection` will already be set to false\n\n      // @param [Reflection] reflection the reflection this inverseReflection will be for\n      // @param [Reflection,Boolean] inverseReflection the inverse reflection to check the validity of\n      // @return [Boolean] whether or not the inverse reflection is valid\n      validInverseReflection = function(reflection, inverseReflection) {\n        return (inverseReflection != null) && reflection.klass().className === inverseReflection.activeResource.className && canFindInverseOfAutomatically(inverseReflection);\n      };\n\n      return AbstractReflection;\n\n    }).call(this);\n\n    Reflection.prototype.HasManyReflection = (function() {\n      class HasManyReflection extends Reflection.prototype.AbstractReflection {\n        collection() {\n          return true;\n        }\n\n        associationClass() {\n          return ActiveResource.prototype.Associations.prototype.HasManyAssociation;\n        }\n\n      };\n\n      HasManyReflection.__excludeFromExtend = true;\n\n      HasManyReflection.prototype.macro = 'hasMany';\n\n      return HasManyReflection;\n\n    }).call(this);\n\n    Reflection.prototype.HasOneReflection = (function() {\n      class HasOneReflection extends Reflection.prototype.AbstractReflection {\n        hasOne() {\n          return true;\n        }\n\n        associationClass() {\n          return ActiveResource.prototype.Associations.prototype.HasOneAssociation;\n        }\n\n      };\n\n      HasOneReflection.__excludeFromExtend = true;\n\n      HasOneReflection.prototype.macro = 'hasOne';\n\n      return HasOneReflection;\n\n    }).call(this);\n\n    Reflection.prototype.BelongsToReflection = (function() {\n      class BelongsToReflection extends Reflection.prototype.AbstractReflection {\n        belongsTo() {\n          return true;\n        }\n\n        constructable() {\n          return !this.polymorphic();\n        }\n\n        associationClass() {\n          if (this.polymorphic()) {\n            return ActiveResource.prototype.Associations.prototype.BelongsToPolymorphicAssociation;\n          } else {\n            return ActiveResource.prototype.Associations.prototype.BelongsToAssociation;\n          }\n        }\n\n      };\n\n      BelongsToReflection.__excludeFromExtend = true;\n\n      BelongsToReflection.prototype.macro = 'belongsTo';\n\n      return BelongsToReflection;\n\n    }).call(this);\n\n    return Reflection;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Relation constructs queries based on a chained series of functions that extend the chain\n  // or execute the built query, then building the result and returning it as either an\n  // ActiveResource::Base or Collection of ActiveResource::Base\n\n  // ActiveResource::Base extends Relation and Relation.prototype in order to add class level and instance level\n  // Relation functions to its class level. Relation instances build extended Relation instances, but\n  // ActiveResource::Base subclasses can build extended Relation instances much like Rails\n\n  // @example\n  //   Order.where(price: 5.0).all()\n\n  // @example\n  //   Order.where(price: 5.0).order('updatedAt').page(2).perPage(5).all()\n\n  // @example\n  //   Order.includes('transactions').select('id','price',transactions: ['id','amount']).first(5)\n\n  // @example\n  //   Order.find(token: 'as8h2nW')\n\n  // @example\n  //   Order.includes('transactions').findBy(token: 'as8h2nW')\n\n  ActiveResource.Relation = ActiveResource.prototype.Relation = (function() {\n    class Relation {\n      // @param [ActiveResource::Base] base the resource class this relation is for\n      // @param [Object] __queryParams the __queryParams already built by previous links in\n      //   the Relation chain\n      constructor(base, __queryParams) {\n        this.base = base;\n        this.__queryParams = __queryParams;\n        this.queryName = this.base.queryName;\n      }\n\n      // Returns links to the server for the resource that this relation is for\n\n      // This will always be { related: baseUrl + '/[@base.queryName]' }\n      // @return [Object] string URLs for the resource\n      links() {\n        return this.base.links();\n      }\n\n      // Returns the interface for the resource, taken from its klass's resourceLibrary\n\n      // @return [Interface] the interface to use for this resource\n      interface() {\n        return this.base.interface();\n      }\n\n      // Adds filters to the query\n\n      // @example\n      //  .where(price: 5.0) = { filter: { price: 5.0 } }\n\n      // @param [Object] options the hash of filters to add the query\n      // @return [ActiveResource::Relation] the extended relation with added `filter` params\n\n      // 1. Extend __queryParams['filter'] with the additional options\n      // 2. Create new relation with the extended __queryParams\n      where(options) {\n        return this.__newRelation(this.__extendObjectParam('filter', options));\n      }\n\n      // Sorts the query based on columns\n\n      // @example\n      //  .order(updatedAt: 'asc') = { sort: 'updatedAt' }\n\n      // @example\n      //  .order(price: 'desc') = { sort: '-price' }\n\n      // @example\n      //  .order(price: 'desc', updatedAt: 'asc') = { sort: '-price,updatedAt' }\n\n      // @param [Array<String>] args a list of columns to order the query by\n      // @return [ActiveResource::Relation] the extended relation with added `sort` params\n\n      // 1. Add sorting key/value pairs to __queryParams['sort'] object\n      // 2. Create new relation with the extended __queryParams\n      order(args) {\n        return this.__newRelation(this.__extendObjectParam('sort', args));\n      }\n\n      // Selects the fields to return from the query\n\n      // @example\n      //  Order.select('id', 'updatedAt') = { fields: { orders: 'id,updatedAt' } }\n\n      // @example\n      //  Order.includes('transactions').select('id', 'updatedAt', transactions: 'amount') =\n      //    { fields: { orders: 'id,updatedAt', transactions: 'amount' } }\n\n      // @example\n      //  Order.includes(transactions: 'merchant')\n      //  .select('id', 'updatedAt', transactions: 'amount', merchant: ['id', 'name']) =\n      //    { fields: { orders: 'id,updatedAt', transactions: 'amount', merchant: 'id,name' } }\n      // @note Just because the merchant include is nested, does not mean we nest the merchant fields definition\n\n      // @param [Array<String,Object>] args an array of field representations to cull the query by\n      // @return [ActiveResource::Relation] the extended relation with added `sort` params\n\n      // 1. Build new queryParams so we don't persist across relation constructions\n      // 2. Flatten the field arguments into an array of strings/objects and iterate over it\n      // 3. Determine the model name for each field\n      //   * If object: model name is the key (Order.select({ transactions: [...] }) # => transactions)\n      //   * If string: model name is @base.queryName (Order.select('id') # => orders)\n      // 4. Append the list of fields to the array of fields for that model\n      //   * If object: first value of arg is array to append (Order.select({ transactions: ['id'] }) => ['id'])\n      //   * If string: arg itself is item to append to array (Order.select('id') => ['id'])\n      // 5. Create new relation with the extended queryParams\n      select(...args) {\n        var queryParams;\n        queryParams = _.clone(this.queryParams());\n        queryParams['fields'] || (queryParams['fields'] = {});\n        ActiveResource.prototype.Collection.build(args).map(function(a) {\n          var i, key, len, ref, results;\n          if (_.isObject(a)) {\n            ref = _.keys(a);\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              key = ref[i];\n              results.push(_.pick(a, key));\n            }\n            return results;\n          } else {\n            return a;\n          }\n        }).flatten().each((arg) => {\n          var modelName;\n          modelName = _.isObject(arg) ? _.keys(arg)[0] : this.queryName;\n          return queryParams['fields'] = this.__extendArrayParam(modelName, _.isObject(arg) ? [_.values(arg)[0]] : [arg], queryParams['fields']);\n        });\n        return this.__newRelation(queryParams);\n      }\n\n      // Defines the page number of the query\n\n      // @example\n      //  .page(2) = { page: { number: 2 } }\n\n      // @param [Integer] value the page number to define for the query\n      // @return [ActiveResource::Relation] the extended relation with added `page.number` param\n      page(value) {\n        return this.__newRelation(this.__extendObjectParam('page', {\n          number: value\n        }));\n      }\n\n      // Defines the page size of the query\n\n      // @example\n      //  .perPage(5) = { page: { size: 5 } }\n\n      // @param [Integer] value the page size to define for the query\n      // @return [ActiveResource::Relation] the extended relation with added `page.size` param\n      perPage(value) {\n        return this.__newRelation(this.__extendObjectParam('page', {\n          size: value\n        }));\n      }\n\n      // Defines the limit on the number of resources to query\n\n      // @example\n      //  .limit(2) = { limit: 2 }\n\n      // @param [Integer] value the limit on the number of resources to query\n      // @return [ActiveResource::Relation] the extended relation with added `limit` param\n      limit(value) {\n        return this.__newRelation(this.__extendValueParam('limit', value));\n      }\n\n      // Defines the offset to start querying resources at\n\n      // @example\n      //  .offset(2) = { offset: 2 }\n\n      // @param [Integer] value the offset to start querying resources at\n      // @return [ActiveResource::Relation] the extended relation with added `offset` param\n      offset(value) {\n        return this.__newRelation(this.__extendValueParam('offset', value));\n      }\n\n      // Adds association includes to the query\n\n      // @example\n      //   .includes('merchant','product') = { include: ['merchant','product'] }\n\n      // @example\n      //   .includes('merchant','product',transactions: ['paymentMethod','paymentGateway']) =\n      //     { ['merchant','product',{ transactions: ['paymentMethod','paymentGateway'] }] }\n\n      // @example\n      //   .includes('merchant','product',transactions: { paymentMethod: 'customer' }]) =\n      //     { ['merchant','product',{ transactions: { paymentMethod: 'customer' } }] }\n\n      // @param [Array<String,Object>] args the representations of includes to add to the query\n      // @return [ActiveResource::Relation] the extended relation with added `include` params\n\n      // 1. Go through array of args and separate objects with multiple keys in arrays of single key objects so\n      //    the array does this: ['1', '2', { 3: 'a', 4: 'b' }] => ['1', '2', { 3: 'a' }, { 4: 'b' }]\n      // 1. Append flattened array args to __queryParams['include'] collection\n      // 2. Create new relation with extended __queryParams\n      includes(...args) {\n        args = ActiveResource.prototype.Collection.build(args).map(function(a) {\n          var i, key, len, ref, results;\n          if (_.isObject(a)) {\n            ref = _.keys(a);\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              key = ref[i];\n              results.push(_.pick(a, key));\n            }\n            return results;\n          } else {\n            return a;\n          }\n        }).flatten().toArray();\n        return this.__newRelation(this.__extendArrayParam('include', args));\n      }\n\n      // Builds a new ActiveResource of the type for this relation\n\n      // @example\n      //   Order.build(price: 5.0, merchant: merchant)\n\n      // @example\n      //   Order.where(price: 5.0).build(merchant: merchant)\n\n      // @param [Object] attributes the attributes to build the resource with\n      // @return [ActiveResource::Base] the built resource\n\n      // 1. If @base exists (class is Relation), then build base()\n      // 2. If @base does not exist (class is Base), then build this()\n      // 3. Assign attributes passed in to built resource\n      // 4. Assign the filters of the Relation to the built resource\n      // 5. Return the built resource\n      build(attributes = {}) {\n        var resource;\n        resource = this.base != null ? new this.base() : new this();\n        resource.__assignAttributes(_.extend(attributes, this.queryParams()['filter']));\n        resource.assignResourceRelatedQueryParams(this.queryParams());\n        resource.__executeCallbacks('afterBuild');\n        return resource;\n      }\n\n      // Builds a new ActiveResource of the type for this relation and persists it on the server\n\n      // @example\n      //   Order.create(price: 5.0, merchant: merchant)\n\n      // @example\n      //   Order.where(price: 5.0).create(merchant: merchant)\n\n      // @param [Object] attributes the attributes to build the resource with\n      // @param [Function] callback the callback to pass the ActiveResource into on completion\n      // @return [Promise] a promise to return the ActiveResource, valid or invalid\n      create(attributes = {}, callback) {\n        return this.build(attributes).save(callback);\n      }\n\n      // TODO: Add `updateAll` and `destroyAll` when JSON API supports mass updating/destroying\n      // https://github.com/json-api/json-api/issues/795\n\n      // Retrieves an ActiveResource in the relation corresponding to an ID\n\n      // @param [Integer,String] primaryKey the primary key of the resource to query the server for\n      // @return [Promise] a promise to return the ActiveResource **or** errors\n      find(primaryKey) {\n        var url;\n        if (primaryKey == null) {\n          return;\n        }\n        url = ActiveResource.prototype.Links.__constructLink(this.links()['related'], primaryKey.toString());\n        return this.interface().get(url, this.queryParams());\n      }\n\n      // Retrieves the first ActiveResource in the relation corresponding to conditions\n\n      // @param [Object] conditions the conditions to filter by\n      // @return [Promise] a promise to return the ActiveResource **or** errors\n      findBy(conditions) {\n        return this.where(conditions).first();\n      }\n\n      // Retrieves all resources in the relation\n\n      // @return [Promise] a promise to return a Collection of ActiveResources **or** errors\n      all() {\n        return this.interface().get(this.links()['related'], this.queryParams());\n      }\n\n      // Retrieves all resources in the relation and calls a function with each one of them\n\n      // @param [Function] iteratee the function to call with each item of the relation\n      // @return [Promise] a promise that returns the collection **or** errors\n      each(iteratee) {\n        return this.all().then(function(collection) {\n          collection.each(iteratee);\n          return collection;\n        });\n      }\n\n      // Retrieves the first n ActiveResource in the relation\n\n      // @param [Integer] n the number of resources to retrieve\n      // @return [Promise] a promise to return an Array of n ActiveResources **or** errors\n\n      // 1. If there are no page params set, we can apply limit n to optimize the query\n      // => * If page params are set, we risk retrieving the \"first\" resource incorrectly\n      // 2. Query all resources in the relation and then return the first N resources from the resulting collection\n      first(n) {\n        var relation;\n        relation = this.queryParams()['page'] != null ? this : this.limit(n || 1);\n        return relation.all().then(function(collection) {\n          return collection.first(n);\n        });\n      }\n\n      // Retrieves the last n ActiveResource in the relation\n\n      // @param [Integer] n the number of resources to retrieve\n      // @return [Promise] a promise to return an Array of n ActiveResources **or** errors\n\n      // 1. If there are no page params set, we can apply limit and offset to optimize the query\n      // => * If page params are set, we risk retrieving the \"last\" resource incorrectly\n      // 2. Query all resources in the relation and then return the last N resources from the resulting collection\n      last(n) {\n        var relation;\n        relation = this.queryParams()['page'] != null ? this : this.offset(-(n || 1)).limit(n || 1);\n        return relation.all().then(function(collection) {\n          return collection.last(n);\n        });\n      }\n\n      // private\n\n      // Creates a new ActiveResource::Relation with the extended __queryParams passed in\n      // @param [Object] queryParams the extended query params for the relation\n      // @return [ActiveResource::Relation] the new Relation for the extended query\n      __newRelation(queryParams) {\n        return new this.constructor(this.base, queryParams);\n      }\n\n    };\n\n    ActiveResource.include(Relation, ActiveResource.prototype.QueryParams);\n\n    ActiveResource.include(Relation, ActiveResource.prototype.Typing);\n\n    return Relation;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // Base class for interfacing with ActiveResources\n\n  // @example\n  //   class window.Order extends ActiveResource::Base\n  //     this.className = 'Order'\n  //     this.queryName = 'orders'\n\n  //     @belongsTo('product')\n\n  //     @hasMany('comments', as: 'resource')\n\n  ActiveResource.prototype.Base = (function() {\n    class Base {\n      constructor() {\n        this.__initializeFields();\n      }\n\n      // The interface to use when querying the server for this class\n      static interface() {\n        return this.resourceLibrary.interface;\n      }\n\n      // The interface to use when querying the server for this resource\n      interface() {\n        return this.klass().interface();\n      }\n\n      // Creates a new ActiveResource::Relation with the extended queryParams passed in\n\n      // @param [Object] queryParams the extended query params for the relation\n      // @return [ActiveResource::Relation] the new Relation for the extended query\n      static __newRelation(queryParams) {\n        return new ActiveResource.prototype.Relation(this, queryParams);\n      }\n\n      toString() {\n        return JSON.stringify(this.interface().buildResourceDocument({\n          resourceData: this\n        }));\n      }\n\n    };\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Associations);\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Attributes.prototype);\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Callbacks.prototype);\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Fields.prototype);\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Reflection.prototype);\n\n    ActiveResource.extend(Base, ActiveResource.prototype.Relation.prototype);\n\n    // Add Links after Relation since Relation also contains a `links` prototype method extended to Base, but it should\n    // only be used for instances of Relation, not static Base itself\n    ActiveResource.extend(Base, ActiveResource.prototype.Links);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Associations.prototype);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Attributes);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Callbacks);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Cloning);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Errors);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Fields);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Links.prototype);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Persistence);\n\n    ActiveResource.include(Base, ActiveResource.prototype.QueryParams);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Typing);\n\n    // The name to use when constantizing on the client\n    // @example 'Product'\n\n    // @note On a production server where minification occurs, the actual name of classes\n    //   `@constructor.name` will change from `Product` to perhaps `p`. But, since a class\n    //   is added as a variable to its resource library (or its prototype), we can use this\n    //   method to determine the name of the variable in the resource library scope\n    // @className = ''\n\n    // The name to use when querying the server for this resource\n    // @example 'products'\n    // @queryName = ''\n\n    // The primary key by which to index this resource\n    Base.primaryKey = 'id';\n\n    return Base;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // The instantiated class that manages an association for an ActiveResource\n  ActiveResource.prototype.Associations.prototype.Association = (function() {\n    class Association {\n      // @param [ActiveResource::Base] the resource that owners this association\n      // @param [ActiveResource::Reflection] reflection the reflection of the association\n      constructor(owner, reflection) {\n        this.owner = owner;\n        this.reflection = reflection;\n        this.reset();\n      }\n\n      // Delegate the klass of the association to its reflection\n      // @return [Class] the ActiveResource class for the association\n      klass() {\n        return this.reflection.klass();\n      }\n\n      // Delegate the options of the association to its reflection\n      // @return [Object] the options for the association\n      options() {\n        return this.reflection.options;\n      }\n\n      // Retrieves the links for the association\n\n      // @note Two types of links:\n      //   {\n      //     links: {\n      //       self:    '/products/1/relationships/orders',  # Called when modifying relationships\n      //       related: '/products/1/orders'                 # Called when creating/finding target\n      //     }\n      //   }\n\n      // @return [Object] the links for the association\n      links() {\n        return this.__links || (this.__links = _.clone(this.klass().links()));\n      }\n\n      // The interface that the owner of this association uses\n      interface() {\n        return this.owner.klass().interface();\n      }\n\n      // Resets the loaded flag to `false` and the target to `nil`\n      reset() {\n        this.__loaded = false;\n        return this.target = null;\n      }\n\n      // Reloads the target and returns `this` on success\n\n      // @return [Promise] a promise to return the reloaded association **or** errors\n      reload() {\n        var _this;\n        this.reset();\n        _this = this;\n        return this.loadTarget().then(function() {\n          return _this;\n        });\n      }\n\n      // A setter and getter for the loaded flag\n      // @note @loaded() is the getter\n      // @note @loaded(true) is the setter\n\n      // @param [Boolean] set whether or not to set loaded flag to true\n      // @return [Boolean] the loaded flag\n      loaded(set = false) {\n        if (set) {\n          this.__loaded = true;\n        }\n        return this.__loaded;\n      }\n\n      // Loads the target if needed and returns it\n\n      // This method is abstract in the sense that it relies on `__findTarget`,\n      // which is expected to be provided by descendants\n\n      // If the target is already loaded it is just returned. Thus, you can call\n      // loadTarget unconditionally to get the target\n\n      // @return [Promise] a promise to return the loaded target **or** 404 error\n      loadTarget() {\n        if (this.__canFindTarget()) {\n          return this.__findTarget().then((loadedTarget) => {\n            this.target = loadedTarget;\n            this.loaded(true);\n            return loadedTarget;\n          }).catch(() => {\n            return this.reset();\n          });\n        } else {\n          this.reset();\n          return null;\n        }\n      }\n\n      // Sets the inverse association of the resource to the owner of the association\n\n      // @example\n      //   GiftCard.hasOne('order')\n      //   Order.belongsTo('giftCard')\n\n      //   g = GiftCard.build()\n      //   o = Order.build()\n\n      //   g.association('order').setInverseInstance(o)\n      //   o.association('giftCard').target == g\n\n      // @param [ActiveResource::Base] the resource to set the inverse association of\n      // @return [ActiveResource::Base] the resource, possibly with an inversed association\n      setInverseInstance(resource) {\n        var inverse;\n        if (this.__invertibleFor(resource)) {\n          inverse = resource.association(this.__inverseReflectionFor(resource).name);\n          if (inverse.reflection.collection()) {\n            inverse.addToTarget(this.owner);\n          } else {\n            inverse.target = this.owner;\n          }\n        }\n        return resource;\n      }\n\n      // private\n\n      // Throws error if we try to assign resource of one type to an association that requires another type\n\n      // @param [Object] resource the value/resource being assigned to the association\n      __raiseOnTypeMismatch(resource) {\n        if (!(typeof resource.isA === \"function\" ? resource.isA(this.reflection.klass()) : void 0)) {\n          throw `${this.reflection.className()} expected, got ${resource} which is an instance of ${resource.constructor}`;\n        }\n      }\n\n      // Whether or not we can find the target\n\n      // We can find the target if:\n      // 1. The owner resource is not a new resource, or we have a foreign key to query with\n      // 2. The target klass exists (so we can build the target)\n\n      // @return [Boolean] whether or not we can find the target\n      __canFindTarget() {\n        return (!this.owner.newResource() || this.__foreignKeyPresent()) && this.klass();\n      }\n\n      // Defines attributes to create new resources with this association\n\n      // @return [Object] the attributes to create new resources with this association with\n      __creationAttributes() {\n        var attributes, base, base1;\n        attributes = {};\n        if ((typeof (base = this.reflection).hasOne === \"function\" ? base.hasOne() : void 0) || (typeof (base1 = this.reflection).collection === \"function\" ? base1.collection() : void 0)) {\n          attributes[this.reflection.foreignKey()] = this.owner[this.reflection.activeResourcePrimaryKey()];\n          if (this.reflection.options['as']) {\n            attributes[this.reflection.type()] = this.owner.klass().className;\n          }\n        }\n        return attributes;\n      }\n\n      // If the resource library of the owner klass is immutable, then execute callback in the context\n      //   of a clone of the owner association, and return the cloned owner from the method calling\n      //   __cloneOnCallbackIfImmutable\n\n      // @note If immutable is true, then value will be cloned before assignment to owner.clone\n\n      // @note Used by association writer, build, create, concat, delete\n      // @param [Boolean] checkImmutable if true, check if immutable, otherwise just run the normal fn\n      // @param [ActiveResource, Array<ActiveResource>] value the value to assign to the relationship\n      // @param [Function] fn the function to execute, potentially in the scope of the cloned owner\n      // @return [Resource, Promise] if immutable, return cloned owner, otherwise return the value returned by fn\n      __executeOnCloneIfImmutable(checkImmutable, value, fn) {\n        var clone, newValue, result;\n        if (checkImmutable && this.owner.klass().resourceLibrary.immutable) {\n          clone = this.owner.clone();\n          newValue = ActiveResource.Collection.build(value).map((val) => {\n            return (val != null ? val.__createClone({\n              cloner: this.owner,\n              newCloner: clone\n            }) : void 0) || null;\n          });\n          result = _.bind(fn, clone.association(this.reflection.name))(_.isArray(value) && newValue.toArray() || newValue.first());\n          if (result.then != null) {\n            return result.then(() => {\n              return clone;\n            });\n          } else {\n            return clone;\n          }\n        } else {\n          return _.bind(fn, this)(value);\n        }\n      }\n\n      // Used by hasOne and hasMany to set their owner attributes on belongsTo resources\n      __setOwnerAttributes(resource) {\n        var key, ref, results, value;\n        ref = this.__creationAttributes();\n        results = [];\n        for (key in ref) {\n          value = ref[key];\n          results.push(resource[key] = value);\n        }\n        return results;\n      }\n\n      // Returns true if there is a foreign key present on the owner which\n      // references the target. This is used to determine whether we can load\n      // the target if the owner is currently a new resource (and therefore\n      // without a key). If the owner is a new resource then foreign_key must\n      // be present in order to load target.\n\n      // Currently implemented by belongsTo (vanilla and polymorphic)\n      __foreignKeyPresent() {\n        return false;\n      }\n\n      // Can be redefined by subclasses, notably polymorphic belongs_to\n      // The resource parameter is necessary to support polymorphic inverses as we must check for\n      // the association in the specific class of the resource.\n\n      // @param [ActiveResource::Base] the resource with reflection to find an inverseOf()\n      // @return [ActiveResource::Reflection] the inverse reflection for the resource's reflection\n      __inverseReflectionFor(resource) {\n        return this.reflection.inverseOf();\n      }\n\n      // Returns true if inverse association on the given resource needs to be set.\n      // This method is redefined by subclasses.\n\n      // @param [ActiveResource::Base] the resource to determine if we need to set the inverse association for\n      // @return [Boolean] whether or not the inverse association needs to be set\n      __invertibleFor(resource) {\n        return this.__inverseReflectionFor(resource) != null;\n      }\n\n      // @return [Boolean] returns true if the resource contains the foreignKey\n      __foreignKeyFor(resource) {\n        return typeof resource.hasAttribute === \"function\" ? resource.hasAttribute(this.reflection.foreignKey()) : void 0;\n      }\n\n      // Builds a resource in the association with the given attributes\n\n      // @param [Object] attributes the attributes to build the resource with\n      // @return [ActiveResource::Base] the built resource in the association\n      __buildResource(attributes) {\n        var resource;\n        resource = this.reflection.buildAssociation();\n        resource.__assignAttributes(attributes);\n        return resource;\n      }\n\n    };\n\n    ActiveResource.include(Association, ActiveResource.prototype.Typing);\n\n    // Don't add this class when extending/include the parent\n    Association.__excludeFromExtend = true;\n\n    return Association;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  // CollectionAssociation is an abstract class that provides common stuff to ease the implementation\n  // of association proxies that represent collections.\n  ActiveResource.prototype.Associations.prototype.CollectionAssociation = class CollectionAssociation extends ActiveResource.prototype.Associations.prototype.Association {\n    // @note Adds @queryName so it can be used in CollectionProxy when making Relations\n\n    // @param [ActiveResource::Base] the resource that owners this association\n    // @param [ActiveResource::Reflection] reflection the reflection of the association\n    constructor(owner, reflection) {\n      super(...arguments);\n      this.owner = owner;\n      this.reflection = reflection;\n      this.queryName = this.klass().queryName;\n    }\n\n    // Getter for the proxy to the target\n    reader() {\n      return this.proxy || (this.proxy = new ActiveResource.prototype.Associations.prototype.CollectionProxy(this));\n    }\n\n    // Setter for the target\n\n    // @param [Collection,Array] resources the resources to assign to the association\n    // @param [Boolean] save whether or not to persist the assignment on the server before\n    //   continuing with the local assignment\n    // @param [Boolean] checkImmutable if true, check if immutable when applying changes\n    // @return [Promise] a promise that indicates that the assignment was successful **or** errors\n    writer(resources, save = true, checkImmutable = false) {\n      return this.__executeOnCloneIfImmutable(checkImmutable, resources, function(resources) {\n        var base, localAssignment, persistedResources;\n        resources = ActiveResource.prototype.Collection.build(resources);\n        resources.each((r) => {\n          return this.__raiseOnTypeMismatch(r);\n        });\n        persistedResources = resources.select(function(r) {\n          return typeof r.persisted === \"function\" ? r.persisted() : void 0;\n        });\n        localAssignment = () => {\n          if (save) {\n            this.loaded(true);\n          }\n          this.replace(resources);\n          return resources;\n        };\n        if (save && !(typeof (base = this.owner).newResource === \"function\" ? base.newResource() : void 0) && (resources.empty() || !persistedResources.empty())) {\n          return this.__persistAssignment(persistedResources.toArray()).then(localAssignment);\n        } else {\n          return localAssignment();\n        }\n      });\n    }\n\n    // Builds resource(s) for the association\n\n    // @param [Object,Array<Object>] attributes the attributes to build into the resource\n    // @return [ActiveResource::Base] the built resource(s) for the association, with attributes\n    build(attributes = {}) {\n      return this.__executeOnCloneIfImmutable(true, [], function() {\n        if (_.isArray(attributes)) {\n          return ActiveResource.prototype.Collection.build(attributes).map((attr) => {\n            return this.build(attr);\n          });\n        } else {\n          return this.__concatResources(ActiveResource.prototype.Collection.build(this.__buildResource(attributes))).first();\n        }\n      });\n    }\n\n    // Creates resource for the association\n\n    // @todo Add support for multiple resource creation when JSON API supports it\n\n    // @param [Object] attributes the attributes to build into the resource\n    // @param [Object] queryParams the options to add to the query, like `fields` and `include`\n    // @param [Function] callback the function to pass the built resource into after calling create\n    //   @note May not be persisted, in which case `resource.errors().empty? == false`\n    // @return [ActiveResource::Base] a promise to return the persisted resource **or** errors\n    create(attributes = {}, queryParams = {}, callback = _.noop()) {\n      return this.__executeOnCloneIfImmutable(true, [], function() {\n        return this.__createResource(attributes, queryParams, callback);\n      });\n    }\n\n    // Pushes resources onto the target\n\n    // @param [Collection,Array] resources the resources to push onto the association\n    // @return [Promise] a promise that indicates that the concat was successful **or** errors\n    concat(resources) {\n      return this.__executeOnCloneIfImmutable(true, resources, function() {\n        var base, persistedResources;\n        resources = ActiveResource.prototype.Collection.build(resources);\n        resources.each((r) => {\n          return this.__raiseOnTypeMismatch(r);\n        });\n        if (!(typeof (base = this.owner).newResource === \"function\" ? base.newResource() : void 0) && (persistedResources = resources.select(function(r) {\n          return typeof r.persisted === \"function\" ? r.persisted() : void 0;\n        })).size()) {\n          // TODO: Do something better with unpersisted resources, like saving them\n          return this.__persistConcat(persistedResources.toArray()).then(() => {\n            return this.__concatResources(resources);\n          });\n        } else {\n          return this.__concatResources(resources);\n        }\n      });\n    }\n\n    // Deletes resources from the target\n\n    // @param [Collection,Array] resources the resources to delete from the association\n    // @return [Promise] a promise that indicates that the delete was successful **or** errors\n    delete(resources) {\n      return this.__executeOnCloneIfImmutable(true, resources, function() {\n        var base, persistedResources;\n        resources = ActiveResource.prototype.Collection.build(resources);\n        resources.each((r) => {\n          return this.__raiseOnTypeMismatch(r);\n        });\n        if (!(typeof (base = this.owner).newResource === \"function\" ? base.newResource() : void 0) && (persistedResources = resources.select(function(r) {\n          return typeof r.persisted === \"function\" ? r.persisted() : void 0;\n        })).size()) {\n          return this.__persistDelete(persistedResources.toArray()).then(() => {\n            return this.__removeResources(resources);\n          });\n        } else {\n          return this.__removeResources(resources);\n        }\n      });\n    }\n\n    reset() {\n      super.reset();\n      return this.target = ActiveResource.prototype.Collection.build();\n    }\n\n    // Adds the resource to the target\n\n    // @note Uses `replaceOnTarget` to replace the resource in the target if it is\n    //   already in the target\n\n    // @param [ActiveResource::Base] resource the resource to add to the target\n    addToTarget(resource) {\n      var index;\n      index = _.indexOf(this.target.toArray(), resource);\n      if (index < 0) {\n        index = null;\n      }\n      return this.replaceOnTarget(resource, index);\n    }\n\n    // Pushes the resource onto the target or replaces it if there is an index\n\n    // @param [ActiveResource::Base] resource the resource to add to/replace on the target\n    // @param [Integer] index the index of the existing resource to replace\n    replaceOnTarget(resource, index) {\n      if (index != null) {\n        this.target.set(index, resource);\n      } else {\n        this.target.push(resource);\n      }\n      this.setInverseInstance(resource);\n      return resource;\n    }\n\n    // Checks whether or not the target is empty\n\n    // @note Does not take into consideration that the target may not be loaded,\n    //   so if you want to truly know if the association is empty, check that\n    //   `association(...).loaded() and association(...).empty()`\n\n    // @return [Boolean] whether or not the target is empty\n    empty() {\n      return this.target.empty();\n    }\n\n    // private\n    __findTarget() {\n      var _this;\n      _this = this;\n      return this.interface().get(this.links()['related'], this.owner.queryParamsForReflection(this.reflection)).then(function(resources) {\n        resources.each(function(r) {\n          return _this.setInverseInstance(r);\n        });\n        return resources;\n      });\n    }\n\n    // Replaces the target with `other`\n\n    // @param [Collection] other the array to replace on the target\n    replace(other) {\n      this.__removeResources(this.target);\n      return this.__concatResources(other);\n    }\n\n    // Concats resources onto the target\n\n    // @param [Collection] resources the resources to concat onto the target\n    __concatResources(resources) {\n      resources.each((resource) => {\n        this.addToTarget(resource);\n        return this.insertResource(resource);\n      });\n      return resources;\n    }\n\n    // Removes the resources from the target\n\n    // @note Only calls @__deleteResources for now, but can implement callbacks when\n    //   the library gets to that point\n\n    // @param [Collection] the resources to remove from the association\n    __removeResources(resources) {\n      return this.__deleteResources(resources);\n    }\n\n    // Deletes the resources from the target\n    // @note Expected to be defined by descendants\n\n    // @param [Collection] resources the resource to delete from the association\n    __deleteResources(resources) {\n      throw '__deleteResources not implemented on CollectionAssociation';\n    }\n\n    // Persists the new association by patching the owner's relationship endpoint\n\n    // @param [Array] resources the resource to delete from the association\n    __persistAssignment(resources) {\n      return this.interface().patch(this.links()['self'], resources, {\n        onlyResourceIdentifiers: true\n      });\n    }\n\n    // Persists a concat to the association by posting to the owner's relationship endpoint\n\n    // @param [Array] resources the resource to delete from the association\n    __persistConcat(resources) {\n      return this.interface().post(this.links()['self'], resources, {\n        onlyResourceIdentifiers: true\n      });\n    }\n\n    // Persists deleting resources from the association by deleting it on the owner's relationship endpoint\n\n    // @param [Array] resources the resource to delete from the association\n    __persistDelete(resources) {\n      return this.interface().delete(this.links()['self'], resources, {\n        onlyResourceIdentifiers: true\n      });\n    }\n\n    // @see #create\n    __createResource(attributes, queryParams, callback) {\n      var _this, base, resource;\n      if (!(typeof (base = this.owner).persisted === \"function\" ? base.persisted() : void 0)) {\n        throw 'You cannot call create on an association unless the parent is saved';\n      }\n      resource = this.__buildResource(attributes);\n      resource.assignQueryParams(queryParams);\n      this.insertResource(resource);\n      _this = this;\n      return resource.save(callback).then(function() {\n        _this.addToTarget(resource);\n        return resource;\n      });\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // Manages a hasMany association in the same form as a Relation, except all queries\n  // are made with association links and a lot of the methods make use of Association\n  // to accomplish their goal\n  ActiveResource.prototype.Associations.prototype.CollectionProxy = (function() {\n    class CollectionProxy extends ActiveResource.prototype.Relation {\n      target() {\n        return this.base.target;\n      }\n\n      // Override Relation#queryParams so we can merge together the queryParams of both\n      // owner.queryParamsForReflection(thisReflection) and the queryParams of the association\n      // class. This is important because we have to use the queryParams that were used to\n      // initially load this association, but if we ever do another query here we must also use\n      // the queryParams for the klass so autosave associations will be reloaded if we do something\n      // like `product.orders().create(orderItems: [...])`, if Order#orderItems were an autosave\n      // association\n\n      // TODO: If we ever include an association, we should automatically add nested includes for\n      // each default include of that association's class\n\n      // @return [Object] queryParams the queryParams for the collection proxy\n      queryParams() {\n        return this.__queryParams || (this.__queryParams = (() => {\n          var base, klassQueryParams, queryParams;\n          queryParams = _.clone(this.base.owner.queryParamsForReflection(this.base.reflection));\n          if (!(typeof (base = this.base.reflection).polymorphic === \"function\" ? base.polymorphic() : void 0)) {\n            klassQueryParams = _.clone(this.base.klass().queryParams());\n            if (klassQueryParams['include'] != null) {\n              queryParams = this.__extendArrayParam('include', klassQueryParams['include'], queryParams);\n            }\n            if (klassQueryParams['fields'] != null) {\n              _.each(klassQueryParams['fields'], function(v, k) {\n                var v2;\n                if ((v2 = queryParams['fields'][k])) {\n                  return v2.push(...v);\n                } else {\n                  return queryParams['fields'][k] = v;\n                }\n              });\n            }\n          }\n          return queryParams;\n        })());\n      }\n\n      // Gets all the items in the association\n\n      // @note This method will not set the target of the association to the response,\n      //   it will only retrieve the target of the association and return it\n      //   You must preload the association or call `load[Association]()` or\n      //   `association(...).loadTarget()`\n\n      // @param [Object] options the options to use when getting the items\n      // @option [Boolean] cached if true, uses items already cached locallys\n\n      // TODO: Add cached versions of first, last, find, where, empty etc.\n      all(options = {}) {\n        if (options['cached']) {\n          return this.target();\n        } else {\n          return super.all();\n        }\n      }\n\n      // Loads into the target the result of `all` (which does not write its\n      // result to target)\n\n      // @note This differs from @base.loadTarget() because that does not use queryParams()\n      //   like Relation or CollectionProxy\n      // @return [Promise] the array of cached collection association items\n      load() {\n        return this.all().then((collection) => {\n          return this.base.writer(collection, false, true);\n        });\n      }\n\n      // Gets the cached association collection and returns it as an array\n\n      // @return [Array<ActiveResource::Base>] the array of cached collection association items\n      toArray() {\n        return this.all({\n          cached: true\n        }).toArray();\n      }\n\n      // Returns the size of the target currently loaded into memory\n\n      // @return [Integer] the size of the loaded target\n      size() {\n        return this.target().size();\n      }\n\n      // Checks whether or not the target is empty\n\n      // @note Does not take into consideration that the target may not be loaded,\n      //   so if you want to truly know if the association is empty, check that\n      //   `association(...).loaded() and association(...).empty()`\n\n      // @return [Boolean] whether or not the target is empty\n      empty() {\n        return this.target().empty();\n      }\n\n      // Assigns the association to `other`\n\n      // @param [Array,Collection] other the other collection to set the association to\n      // @param [Boolean] save whether or not to persist the assignment on the server\n      // @return [Promise] a promise to return a success indicator (204 No Content) **or**\n      //   an error indicator (403 Forbidden)\n      assign(other, save = true) {\n        return this.base.writer(other, save, true);\n      }\n\n      // Pushes the resources onto the association\n\n      // @param [Array,Collection] resources the resources to push onto the association\n      // @return [Promise] a promise to return a success indicator (204 No Content) **or**\n      //   an error indicator (403 Forbidden)\n      push(resources) {\n        return this.base.concat(resources);\n      }\n\n      // Builds resource(s) for the association\n\n      // @see CollectionAssociation#build\n\n      // @param [Object,Array<Object>] attributes the attributes to build into the resource\n      // @return [ActiveResource::Base] the built resource(s) for the association, with attributes\n      build(attributes = {}) {\n        var resources;\n        attributes = _.isArray(attributes) ? _.map(attributes, (attr) => {\n          return _.extend(attr, this.queryParams()['filter']);\n        }) : _.extend(attributes, this.queryParams()['filter']);\n        resources = ActiveResource.prototype.Collection.build(this.base.build(attributes));\n        resources.each((r) => {\n          return r.assignResourceRelatedQueryParams(this.queryParams());\n        });\n        if (resources.size() > 1) {\n          return resources;\n        } else {\n          return resources.first();\n        }\n      }\n\n      // Create resource for the association\n\n      // @see CollectionAssociation#create\n\n      // @param [Object] attributes the attributes to build into the resource\n      // @param [Function] callback the function to pass the built resource into after calling create\n      //   @note May not be persisted, in which case `resource.errors().empty? == false`\n      // @return [ActiveResource::Base] a promise to return the persisted resource **or** errors\n      create(attributes = {}, callback) {\n        attributes = _.extend(attributes, this.queryParams()['filter']);\n        return this.base.create(attributes, this.__resourceRelatedParams(), callback);\n      }\n\n      // Reloads the association\n\n      // @return [Promise<ActiveResource::Base>] a promise to return the reloaded target **or** errors\n      reload() {\n        return this.base.reload();\n      }\n\n      // Deletes the resources from the association\n\n      // @param [Array,Collection] resources the resources to delete from the association\n      // @return [Promise] a promise to return a success indicator (204 No Content) **or**\n      //   an error indicator (403 Forbidden)\n      delete(resources) {\n        return this.base.delete(resources);\n      }\n\n      // Deletes all the resources in the association from the association\n\n      // @return [Promise] a promise to return a success indicator (204 No Content) **or**\n      //   an error indicator (403 Forbidden)\n      deleteAll() {\n        return this.base.delete(this.target());\n      }\n\n    };\n\n    // Don't add this class when extending/include the parent\n    CollectionProxy.__excludeFromExtend = true;\n\n    return CollectionProxy;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.HasManyAssociation = class HasManyAssociation extends ActiveResource.prototype.Associations.prototype.CollectionAssociation {\n    // Inserts a resource into the collection by setting its owner attributes and inversing it\n\n    // @param [ActiveResource::Base] resource the resource to insert into the collection\n    insertResource(resource) {\n      this.__setOwnerAttributes(resource);\n      return this.setInverseInstance(resource);\n    }\n\n    // Deletes resources from the target and removes their foreign key\n\n    // @param [Array] resources the resources to delete from the target\n    __deleteResources(resources) {\n      resources.each((resource) => {\n        var inverse;\n        if ((inverse = this.reflection.inverseOf()) != null) {\n          return resource.association(inverse.name).replace(null);\n        } else {\n          return resource[this.reflection.foreignKey()] = null;\n        }\n      });\n      return this.target = ActiveResource.prototype.Collection.build(_.difference(this.target.toArray(), resources.toArray()));\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.SingularAssociation = class SingularAssociation extends ActiveResource.prototype.Associations.prototype.Association {\n    // Getter for the target\n    reader() {\n      return this.target;\n    }\n\n    // Setter for the target\n\n    // @param [ActiveResource::Base] resources the resource to assign to the association\n    // @param [Boolean] save whether or not to persist the assignment on the server before\n    //   continuing with the local assignment\n    // @param [Boolean] checkImmutable if true, check if immutable when applying changes\n    // @return [Promise] a promise that indicates that the assignment was successful **or** errors\n    writer(resource, save = true, checkImmutable = false) {\n      return this.__executeOnCloneIfImmutable(checkImmutable, resource, function(resource) {\n        var base, localAssignment;\n        if (resource != null) {\n          this.__raiseOnTypeMismatch(resource);\n        }\n        localAssignment = () => {\n          if (save) {\n            this.loaded(true);\n          }\n          return this.replace(resource);\n        };\n        if (save && !(typeof (base = this.owner).newResource === \"function\" ? base.newResource() : void 0)) {\n          return this.__persistAssignment(resource).then(localAssignment);\n        } else {\n          return localAssignment();\n        }\n      });\n    }\n\n    // Builds a resource for the association\n\n    // @param [Object] attributes the attributes to build into the resource\n    // @return [ActiveResource::Base] the built resource for the association, with attributes\n    build(attributes = {}) {\n      return this.__executeOnCloneIfImmutable(true, [], function() {\n        var resource;\n        resource = this.__buildResource(attributes);\n        this.replace(resource);\n        return resource;\n      });\n    }\n\n    // Creates a resource for the association\n\n    // @param [Object] attributes the attributes to build into the resource\n    // @param [Object] queryParams the options to add to the query, like `fields` and `include`\n    // @param [Function] callback the function to pass the built resource into after calling create\n    //   @note May not be persisted, in which case `resource.errors().empty? == false`\n    // @return [ActiveResource::Base] a promise to return the persisted resource **or** errors\n    create(attributes = {}, queryParams = {}, callback) {\n      return this.__executeOnCloneIfImmutable(true, [], function() {\n        return this.__createResource(attributes, queryParams, callback);\n      });\n    }\n\n    // private\n    replace(resource) {\n      return raise('Subclasses must implement a replace(resource) method');\n    }\n\n    // Persists the new association by patching the owner's relationship endpoint\n    __persistAssignment(resource) {\n      return this.interface().patch(this.links()['self'], resource, {\n        onlyResourceIdentifiers: true\n      });\n    }\n\n    // Gets the resource that is the target\n\n    // @return [Promise] a promise to return the resource **or** error 404\n    __getResource() {\n      return this.interface().get(this.links()['related'], this.owner.queryParamsForReflection(this.reflection));\n    }\n\n    // Finds target using either the owner's relationship endpoint\n\n    // @return [Promise] a promise to return the target **or** error 404\n    __findTarget() {\n      var _this;\n      _this = this;\n      return this.__getResource().then(function(resource) {\n        return _this.setInverseInstance(resource);\n      });\n    }\n\n    // Creates a resource for the association\n\n    // @see #create\n\n    // @return [Promise] a promise to return the created target **or** errors\n    __createResource(attributes, queryParams, callback) {\n      var _this, base, resource;\n      if (!(typeof (base = this.owner).persisted === \"function\" ? base.persisted() : void 0)) {\n        throw 'You cannot call create on an association unless the parent is saved';\n      }\n      resource = this.__buildResource(attributes);\n      resource.assignQueryParams(queryParams);\n      this.replace(resource);\n      _this = this;\n      return resource.save(callback).then(function() {\n        _this.loaded(true);\n        return resource;\n      });\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.HasOneAssociation = class HasOneAssociation extends ActiveResource.prototype.Associations.prototype.SingularAssociation {\n    // private\n    replace(resource) {\n      this.__removeTarget();\n      if (resource) {\n        this.__setOwnerAttributes(resource);\n        this.setInverseInstance(resource);\n        return this.target = resource;\n      }\n    }\n\n    // TODO: Add delete/destroy dependency processing\n    __removeTarget() {\n      if (this.target) {\n        this.__nullifyOwnerAttributes(this.target);\n      }\n      return this.target = null;\n    }\n\n    __nullifyOwnerAttributes(resource) {\n      return resource[this.reflection.foreignKey()] = null;\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.BelongsToAssociation = class BelongsToAssociation extends ActiveResource.prototype.Associations.prototype.SingularAssociation {\n    reset() {\n      super.reset();\n      return this.updated = false;\n    }\n\n    // private\n    replace(resource) {\n      if (resource) {\n        this.__replaceKeys(resource);\n        this.setInverseInstance(resource);\n        this.updated = true;\n      } else {\n        this.__removeKeys();\n      }\n      return this.target = resource;\n    }\n\n    // Gets the resource that is the target of this association, using either the\n    // owner's relationship data endpoint, or the foreign key to query the resource's root URL\n\n    // @return [Promise] a promise to return the resource **or** error 404\n    __getResource() {\n      if (!this.owner.newResource()) {\n        // @example Uses @links()['related'] == '/orders/1/product'\n        return super.__getResource();\n      } else {\n        // @example Uses @links()['related'] == '/products/:product_id'\n        return this.interface().get(this.links()['related'] + this.owner[this.reflection.foreignKey()], this.owner.queryParamsForReflection(this.reflection));\n      }\n    }\n\n    // Replaces the foreign key of the owner with the primary key of the resource (the new target)\n\n    // @param [ActiveResource::Base] resource the resource with a primaryKey to replace the foreignKey of the owner\n    __replaceKeys(resource) {\n      return this.owner[this.reflection.foreignKey()] = resource.__readAttribute(this.reflection.associationPrimaryKey(resource.klass()));\n    }\n\n    // Removes the foreign key of the owner\n    __removeKeys() {\n      return this.owner[this.reflection.foreignKey()] = null;\n    }\n\n    __foreignKeyPresent() {\n      return this.owner.__readAttribute(this.reflection.foreignKey()) != null;\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.BelongsToPolymorphicAssociation = class BelongsToPolymorphicAssociation extends ActiveResource.prototype.Associations.prototype.BelongsToAssociation {\n    klass() {\n      var type;\n      type = this.owner[this.reflection.foreignType()];\n      try {\n        return this.owner.klass().resourceLibrary.constantize(type);\n      } catch (error) {\n        return void 0;\n      }\n    }\n\n    links() {\n      if (this.klass()) {\n        return super.links();\n      } else {\n        return {};\n      }\n    }\n\n    // private\n\n    // Replaces the foreignKey && foreignType of the owner\n\n    // @see BelongsToAssociation#__replaceKeys\n    __replaceKeys(resource) {\n      super.__replaceKeys(resource);\n      return this.owner[this.reflection.foreignType()] = resource.klass().className;\n    }\n\n    // Removes the foreignKey && foreignType of the owner\n\n    // @see BelongsToAssociation#__removeKeys\n    __removeKeys() {\n      super.__removeKeys();\n      return this.owner[this.reflection.foreignType()] = null;\n    }\n\n    // Gets the inverse reflection of the polymorphic reflection\n    __inverseReflectionFor(resource) {\n      return this.reflection.polymorphicInverseOf(resource.klass());\n    }\n\n    __raiseOnTypeMismatch(resource) {}\n\n  };\n\n  // A polymorphic association cannot have a type mismatch, by definition\n\n}).call(this);\n\n(function() {\n  // Defines accessors on ActiveResources for managing associations, handling\n  // foreign key reassignment, persistence, etc.\n  ActiveResource.prototype.Associations.prototype.Builder = (function() {\n    class Builder {};\n\n    // Don't add this class when extending/include the parent\n    Builder.__excludeFromExtend = true;\n\n    Builder.prototype.Association = class Association {\n      // Builds a reflection of an association and defines accessor methods into instances of the model\n\n      // @param [Class] model the ActiveResource class to apply the association to\n      // @param [String] name the name of the association\n      // @param [Object] options options to apply to the association\n      // @return [Reflection] the built reflection\n      static build(model, name, options) {\n        var reflection;\n        reflection = ActiveResource.prototype.Reflection.create(this.macro, name, options, model);\n        this.defineAccessors(model, reflection);\n        return reflection;\n      }\n\n      // Defines getter/setter methods on the model for the association\n\n      // @param [Class] model the ActiveResource class to apply the association to\n      // @param [Reflection] reflection the reflection of the association to build accessors for\n      static defineAccessors(model, reflection) {\n        var name;\n        name = reflection.name;\n        this.defineReaders(model, name);\n        return this.defineWriters(model, name);\n      }\n\n      // Defines getter methods on the model for the association\n\n      // @param [Class] mixin the class to mix getter methods into\n      // @param [String] name the name of the association\n      static defineReaders(mixin, name) {\n        mixin.prototype[name] = function() {\n          return this.association(name).reader();\n        };\n        return mixin.prototype[`load${s.capitalize(name)}`] = function() {\n          return this.association(name).loadTarget();\n        };\n      }\n\n      // Defines setter methods on the model for the association\n\n      // @note In Rails, this method is defined much like `@define_readers` because\n      //   operator overloading exists in Ruby. However, because operator overloading does\n      //   not exist in Javascript, we must define `assign()` methods for associations. But,\n      //   because singular association targets are assigned as variables to their owner model,\n      //   whereas collection association targets are wrapped in a proxy, we must define the\n      //   `assign()` methods in different ways. Singular association assignment is defined on\n      //   the owner model as `assign_[target_klass]()`, whereas collection association\n      //   assignment is defined on the proxy object, as `assign()`\n\n      // @param [Class] mixin the class to mix getter methods into\n      // @param [String] name the name of the association\n      static defineWriters(mixin, name) {\n        return _.noop();\n      }\n\n    };\n\n    return Builder;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.Builder.prototype.CollectionAssociation = class CollectionAssociation extends ActiveResource.prototype.Associations.prototype.Builder.prototype.Association {};\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.Builder.prototype.HasMany = (function() {\n    class HasMany extends ActiveResource.prototype.Associations.prototype.Builder.prototype.CollectionAssociation {};\n\n    HasMany.macro = 'hasMany';\n\n    return HasMany;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.Builder.prototype.SingularAssociation = class SingularAssociation extends ActiveResource.prototype.Associations.prototype.Builder.prototype.Association {\n    // Defines getter/setter methods on the model for the association\n\n    // @param [Class] model the ActiveResource class to apply the association to\n    // @param [Reflection] reflection the reflection of the association to build accessors for\n    static defineAccessors(model, reflection) {\n      super.defineAccessors(...arguments);\n      if (typeof reflection.constructable === \"function\" ? reflection.constructable() : void 0) {\n        return this.defineConstructors(model, reflection.name);\n      }\n    }\n\n    // Defines setter methods on the model for the association\n\n    // @param [Class] mixin the class to mix getter methods into\n    // @param [String] name the name of the association\n    static defineWriters(mixin, name) {\n      mixin.prototype[`assign${s.capitalize(name)}`] = function(value) {\n        return this.association(name).writer(value, false, true);\n      };\n      return mixin.prototype[`update${s.capitalize(name)}`] = function(value) {\n        return this.association(name).writer(value, true, true);\n      };\n    }\n\n    // Defines builder methods on the model for the association\n\n    // @note This is only called on associations with reflections that are `constructable?`\n    //   Polymorphic reflections are not constructable, because the type is ambiguous\n\n    // @param [Class] mixin the class to mix construction methods into\n    // @param [String] name the name of the association\n    static defineConstructors(mixin, name) {\n      mixin.prototype[`build${s.capitalize(name)}`] = function(attributes) {\n        return this.association(name).build(attributes);\n      };\n      return mixin.prototype[`create${s.capitalize(name)}`] = function(attributes, callback) {\n        return this.association(name).create(attributes, callback);\n      };\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.Builder.prototype.BelongsTo = (function() {\n    class BelongsTo extends ActiveResource.prototype.Associations.prototype.Builder.prototype.SingularAssociation {};\n\n    BelongsTo.macro = 'belongsTo';\n\n    return BelongsTo;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Associations.prototype.Builder.prototype.HasOne = (function() {\n    class HasOne extends ActiveResource.prototype.Associations.prototype.Builder.prototype.SingularAssociation {};\n\n    HasOne.macro = 'hasOne';\n\n    return HasOne;\n\n  }).call(this);\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Immutable = class Immutable {};\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing attributes of immutable resources\n  ActiveResource.prototype.Immutable.prototype.Attributes = class Attributes {\n    // Assigns `attributes` to a new resource cloned from this immutable resource\n\n    // @param [Object] attributes the attributes to assign\n    static assignAttributes(attributes) {\n      var clone;\n      clone = this.clone();\n      clone.__assignAttributes(attributes);\n      return clone;\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing attributes of immutable resources\n  ActiveResource.prototype.Immutable.prototype.Errors = class Errors extends ActiveResource.prototype.Errors {\n    // Override ActiveResource::Errors#errors so that errors on resources are managed immutably\n    static errors() {\n      return this.__errors || (this.__errors = new ActiveResource.prototype.Immutable.prototype.Errors(this));\n    }\n\n    // Adds an error with code and message to a new immutable resource's error object for a field\n\n    // @param [String] field the field the error applies to\n    //   Or 'base' if it applies to the base object\n    // @param [String] code the code for the error\n    // @param [String] detail the message for the error\n    // @return [ActiveResource::Base] the new resource with the error added\n    add(field, code, detail = '') {\n      var clone;\n      clone = this.base.clone();\n      clone.errors().__add(field, code, detail);\n      return clone;\n    }\n\n    // Adds an array of errors in a new immutable resource and returns the resource\n\n    // @see #add for individual error params\n\n    // @param [Array<Array>] errors error objects to add\n    // @return [ActiveResource::Base] the new resource with the errors added\n    addAll(...errors) {\n      var clone;\n      clone = this.base.clone();\n      _.map(errors, (error) => {\n        return clone.errors().__add(...error);\n      });\n      return clone;\n    }\n\n    // Propagates errors with nested fields down through relationships to their appropriate resources\n\n    // @note Clones any resource that has errors added to it and replaces it on the owner's association target\n\n    // @param [ActiveResource.Collection<Object>] errors the errors to propagate down the resource\n    propagate(errors) {\n      var errorsByTarget;\n      errorsByTarget = errors.inject({}, (targetObject, error) => {\n        var association, field, nestedError, nestedField;\n        nestedField = error.field.split('.');\n        field = nestedField.shift();\n        nestedError = _.clone(error);\n        if (targetObject[field] == null) {\n          try {\n            association = this.base.association(field);\n          } catch (error1) {\n            association = null;\n          }\n          targetObject[field] = {\n            association: association,\n            errors: ActiveResource.Collection.build()\n          };\n        }\n        if (targetObject[field].association != null) {\n          nestedError.field = nestedField.length === 0 && 'base' || nestedField.join('.');\n        }\n        targetObject[field].errors.push(nestedError);\n        return targetObject;\n      });\n      return _.each(errorsByTarget, (errorsForTarget, k) => {\n        var association, baseErrors, clone, ref, relationshipResource;\n        if (errorsForTarget.association != null) {\n          association = errorsForTarget.association;\n          if (association.reflection.collection()) {\n            baseErrors = errorsForTarget.errors.select((e) => {\n              return e.field === 'base';\n            });\n            baseErrors.each((e) => {\n              e.field = k;\n              return errorsForTarget.errors.delete(e);\n            });\n            baseErrors.each((e) => {\n              return this.push(e);\n            });\n            relationshipResource = association.target.first();\n            if (clone = relationshipResource != null ? relationshipResource.__createClone({\n              cloner: this.base\n            }) : void 0) {\n              this.base.__fields[association.reflection.name].replace(relationshipResource, clone);\n              association.target.replace(relationshipResource, clone);\n              clone.errors().clear();\n              return clone.errors().propagate(errorsForTarget.errors);\n            }\n          } else {\n            if (clone = (ref = association.target) != null ? ref.__createClone({\n              cloner: this.base\n            }) : void 0) {\n              clone.errors().clear();\n              return clone.errors().propagate(errorsForTarget.errors);\n            }\n          }\n        } else {\n          return errorsForTarget.errors.each((e) => {\n            return this.push(e);\n          });\n        }\n      });\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  // ActiveResource methods for managing persistence of immutable resources to the server\n  ActiveResource.prototype.Immutable.prototype.Persistence = class Persistence {\n    // Update specific attributes of the resource, save it, and insert resource into callback after\n\n    // @param [Object] attributes the attributes to update in the resource\n    // @param [Function] callback the callback to pass the ActiveResource into\n    // @return [Promise] a promise to return the ActiveResource, valid or invalid\n    static update(attributes, callback) {\n      var attributesKeys, oldAttributes;\n      attributesKeys = ActiveResource.prototype.Collection.build(_.keys(attributes));\n      oldAttributes = _.pick(this.attributes(), attributesKeys.toArray());\n      oldAttributes = _.defaults(oldAttributes, attributesKeys.inject({}, (obj, k) => {\n        obj[k] = null;\n        return obj;\n      }));\n      return this.__createOrUpdate(this.assignAttributes(attributes)).then(null, function(resource) {\n        resource.__assignAttributes(oldAttributes);\n        return resource;\n      }).then(callback, callback);\n    }\n\n    // Override default __createOrUpdate so it will use a clone in persisting the record\n    static __createOrUpdate(clone = this.clone()) {\n      clone.errors().reset();\n      if (clone.persisted()) {\n        return this.klass().resourceLibrary.interface.patch(this.links()['self'], clone);\n      } else {\n        return this.klass().resourceLibrary.interface.post(this.links()['related'], clone);\n      }\n    }\n\n  };\n\n}).call(this);\n\n(function() {\n  ActiveResource.prototype.Immutable.prototype.Base = (function() {\n    class Base extends ActiveResource.prototype.Base {\n      constructor() {\n        super();\n      }\n\n    };\n\n    ActiveResource.include(Base, ActiveResource.prototype.Immutable.prototype.Attributes);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Immutable.prototype.Errors);\n\n    ActiveResource.include(Base, ActiveResource.prototype.Immutable.prototype.Persistence);\n\n    return Base;\n\n  }).call(this);\n\n}).call(this);\n"],"file":"active-resource.js"}